---
import { getCollection } from "astro:content";
import MealPlanWidget from "./MealPlanWidget.astro";
import ShoppingListWidget from "./ShoppingListWidget.astro";
import CategoryMenuItem from "./CategoryMenuItem.astro";
import CollapsibleCategoryGroup from "./CollapsibleCategoryGroup.astro";
import { slugify } from "../lib/slugify";

export interface Props {
  variant?: "index" | "detail";
  activeCategory?: string;
  activeMainCategory?: string;
  activeTag?: string;
}

const { variant = "index", activeCategory, activeMainCategory, activeTag } = Astro.props;

// Get all recipes to extract categories and tags
const allRecipes = await getCollection("cuisine");

// Count recipes excluding "Petite √âcole" for main listing
const mainListingRecipes = allRecipes.filter(
  (recipe) => recipe.data.mainCategory !== "Petite √âcole"
);

// Build hierarchical category structure
interface CategoryNode {
  name: string;
  count: number;
  subcategories?: Map<string, number>;
}

const mainCategoryMap = new Map<string, CategoryNode>();
const standaloneCategories = new Map<string, number>();

allRecipes.forEach((recipe) => {
  const mainCat = recipe.data.mainCategory;

  if (mainCat) {
    // This recipe belongs to a main category (e.g., "Petite √âcole")
    // Its categories array becomes subcategories under the main category
    if (!mainCategoryMap.has(mainCat)) {
      mainCategoryMap.set(mainCat, {
        name: mainCat,
        count: 0,
        subcategories: new Map(),
      });
    }
    const node = mainCategoryMap.get(mainCat)!;
    node.count++;

    // Add subcategories (e.g., "dessert", "collation" under "Petite √âcole")
    recipe.data.categories?.forEach((subcat) => {
      node.subcategories!.set(subcat, (node.subcategories!.get(subcat) || 0) + 1);
    });
  } else {
    // Standalone categories (no main category)
    // These recipes appear in the main listing and standalone category pages
    recipe.data.categories?.forEach((cat) => {
      standaloneCategories.set(cat, (standaloneCategories.get(cat) || 0) + 1);
    });
  }
});

// Sort main categories alphabetically
const mainCategories = Array.from(mainCategoryMap.values()).sort((a, b) => a.name.localeCompare(b.name));

// Sort standalone categories alphabetically
const categories = Array.from(standaloneCategories.entries()).sort((a, b) => a[0].localeCompare(b[0]));
---

<Fragment>
  <nav class="cuisine-nav" id="cuisineNav">
    <div class="nav-container">
      <div class="nav-left">
        {variant === "detail" && (
          <a href="/cuisine" class="nav-back-link">
            ‚Üê Retour
          </a>
        )}
        <a href="/cuisine" class="nav-logo">
          <span class="logo-icon">ü¶ä</span>
          <span class="logo-text">Renardo Cuisine</span>
        </a>
      </div>

      <div class="nav-center">
        <a
          href={`/cuisine/main/${slugify("Petite √âcole")}`}
          class={`nav-link-button ${activeMainCategory === "Petite √âcole" ? 'active' : ''}`}
        >
          Petite √âcole
        </a>

        <div class="nav-dropdown" id="categoriesDropdown">
          <button class="nav-dropdown-toggle" id="categoriesToggle">
            Cat√©gories
            <span class="dropdown-arrow">‚ñº</span>
          </button>
          <div class="nav-dropdown-menu" id="categoriesMenu">
            <CategoryMenuItem
              href="/cuisine"
              name="Toutes les recettes"
              count={mainListingRecipes.length}
              isActive={activeCategory === undefined && activeMainCategory === undefined}
            />

            {/* Standalone categories first (alphabetically) */}
            {categories.map(([category, count]) => (
              <CategoryMenuItem
                href={`/cuisine/categories/${slugify(category)}`}
                name={category}
                count={count}
                isActive={activeCategory === category && !activeMainCategory}
              />
            ))}

            {/* Main categories with subcategories last (alphabetically), excluding Petite √âcole */}
            {mainCategories
              .filter((mainCat) => mainCat.name !== "Petite √âcole")
              .map((mainCat) => (
                <CollapsibleCategoryGroup
                  mainCategoryName={mainCat.name}
                  mainCategoryUrl={`/cuisine/main/${slugify(mainCat.name)}`}
                  mainCategoryCount={mainCat.count}
                  subcategories={Array.from(mainCat.subcategories?.entries() || [])
                    .sort((a, b) => a[0].localeCompare(b[0]))
                    .map(([name, count]) => ({
                      name,
                      count,
                      url: `/cuisine/main/${slugify(mainCat.name)}/${slugify(name)}`,
                    }))}
                  isActive={activeMainCategory === mainCat.name}
                  activeSubcategory={activeCategory}
                />
              ))}
          </div>
        </div>
      </div>

      <div class="nav-right">
        <ShoppingListWidget />
        <MealPlanWidget />
      </div>

      <button class="nav-mobile-toggle" id="navMobileToggle">
        <span class="hamburger"></span>
      </button>
    </div>
  </nav>

  <div class="nav-mobile-menu" id="navMobileMenu">
    <div class="mobile-widgets-section">
      <h3 class="mobile-section-title">Mes outils</h3>
      <div class="mobile-widgets-container">
        <ShoppingListWidget />
        <MealPlanWidget />
      </div>
    </div>

    <div class="mobile-section">
      <h3 class="mobile-section-title">Navigation</h3>
      <a
        href={`/cuisine/main/${slugify("Petite √âcole")}`}
        class={`mobile-item ${activeMainCategory === "Petite √âcole" ? 'active' : ''}`}
      >
        <span class="item-name">Petite √âcole</span>
      </a>
    </div>

    <div class="mobile-section">
      <h3 class="mobile-section-title">Cat√©gories</h3>
      <a href="/cuisine" class="mobile-item {activeCategory === undefined && activeMainCategory === undefined ? 'active' : ''}">
        <span class="item-name">Toutes les recettes</span>
        <span class="item-count">{mainListingRecipes.length}</span>
      </a>

      {/* Standalone categories first (alphabetically) */}
      {categories.map(([category, count]) => (
        <a
          href={`/cuisine/categories/${slugify(category)}`}
          class={`mobile-item ${activeCategory === category && !activeMainCategory ? 'active' : ''}`}
        >
          <span class="item-name">{category}</span>
          <span class="item-count">{count}</span>
        </a>
      ))}

      {/* Main categories with subcategories last (alphabetically), excluding Petite √âcole */}
      {mainCategories
        .filter((mainCat) => mainCat.name !== "Petite √âcole")
        .map((mainCat) => {
          const mobileGroupId = `mobile-category-group-${slugify(mainCat.name)}`;
          return (
            <div class="mobile-collapsible-group" data-group-id={mobileGroupId}>
              <div class="mobile-category-header">
                <a
                  href={`/cuisine/main/${slugify(mainCat.name)}`}
                  class={`mobile-item main-category ${activeMainCategory === mainCat.name ? 'active' : ''}`}
                >
                  <span class="item-name">{mainCat.name}</span>
                  <span class="item-count">{mainCat.count}</span>
                </a>
                <button
                  class="mobile-collapse-toggle"
                  data-group-id={mobileGroupId}
                  aria-label={`Toggle ${mainCat.name} subcategories`}
                  aria-expanded="false"
                >
                  <span class="mobile-chevron">‚ñ∂</span>
                </button>
              </div>
              <div class="mobile-subcategories" data-group-id={mobileGroupId}>
                {mainCat.subcategories && Array.from(mainCat.subcategories.entries())
                  .sort((a, b) => a[0].localeCompare(b[0]))
                  .map(([subcat, subcount]) => (
                    <a
                      href={`/cuisine/main/${slugify(mainCat.name)}/${slugify(subcat)}`}
                      class={`mobile-item subcategory ${activeMainCategory === mainCat.name && activeCategory === subcat ? 'active' : ''}`}
                    >
                      <span class="item-name">‚Üí {subcat}</span>
                      <span class="item-count">{subcount}</span>
                    </a>
                  ))}
              </div>
            </div>
          );
        })}
    </div>
  </div>
</Fragment>

<style is:global>
  :root {
    --nav-height: 68px;
  }

  .cuisine-nav {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 200;
    background: rgba(250, 248, 243, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(211, 84, 0, 0.15);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  }

  .nav-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0.875rem 2rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }

  /* Left Section */
  .nav-left {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .nav-back-link {
    color: #999;
    text-decoration: none;
    font-size: 0.75rem;
    letter-spacing: 0.05em;
    transition: all 0.2s ease;
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid rgba(211, 84, 0, 0.2);
    border-radius: 2rem;
    display: inline-block;
    text-transform: uppercase;
    font-weight: 600;
  }

  .nav-back-link:hover {
    color: #d35400;
    border-color: rgba(211, 84, 0, 0.4);
    background: rgba(211, 84, 0, 0.03);
    transform: translateX(-2px);
  }

  .nav-logo {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    color: #2c2c2c;
    font-family: "Playfair Display", serif;
    font-weight: 700;
    font-size: 1.25rem;
    transition: color 0.2s ease;
  }

  .nav-logo:hover {
    color: #d35400;
  }

  .logo-icon {
    font-size: 1.5rem;
    line-height: 1;
  }

  /* Center Section */
  .nav-center {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .nav-link-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid rgba(211, 84, 0, 0.2);
    border-radius: 2rem;
    color: #555;
    font-size: 0.85rem;
    font-weight: 600;
    letter-spacing: 0.03em;
    text-decoration: none;
    transition: all 0.2s ease;
    text-transform: uppercase;
    font-family: "Crimson Pro", serif;
  }

  .nav-link-button:hover,
  .nav-link-button.active {
    background: rgba(211, 84, 0, 0.05);
    border-color: rgba(211, 84, 0, 0.4);
    color: #d35400;
  }

  .nav-dropdown {
    position: relative;
  }

  .nav-dropdown-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid rgba(211, 84, 0, 0.2);
    border-radius: 2rem;
    color: #555;
    font-size: 0.85rem;
    font-weight: 600;
    letter-spacing: 0.03em;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
    font-family: "Crimson Pro", serif;
  }

  .nav-dropdown-toggle:hover,
  .nav-dropdown.active .nav-dropdown-toggle {
    background: rgba(211, 84, 0, 0.05);
    border-color: rgba(211, 84, 0, 0.4);
    color: #d35400;
  }

  .dropdown-arrow {
    font-size: 0.65rem;
    transition: transform 0.2s ease;
  }

  .nav-dropdown.active .dropdown-arrow {
    transform: rotate(180deg);
  }

  .nav-dropdown-menu {
    position: absolute;
    top: calc(100% + 0.75rem);
    left: 0;
    min-width: 220px;
    max-height: 400px;
    overflow-y: auto;
    background: #fff;
    border: 2px solid rgba(211, 84, 0, 0.2);
    box-shadow:
      0 4px 12px rgba(0, 0, 0, 0.08),
      0 12px 32px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 300;
  }

  .nav-dropdown.active .nav-dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }


  /* Right Section */
  .nav-right {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  /* Mobile Toggle */
  .nav-mobile-toggle {
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 44px;
    height: 44px;
    background: transparent;
    border: 1px solid rgba(211, 84, 0, 0.2);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .nav-mobile-toggle:hover {
    background: rgba(211, 84, 0, 0.05);
    border-color: rgba(211, 84, 0, 0.4);
    transform: scale(1.05);
  }

  .nav-mobile-toggle:active {
    transform: scale(0.95);
  }

  .nav-mobile-toggle.active {
    background: rgba(211, 84, 0, 0.08);
    border-color: rgba(211, 84, 0, 0.4);
  }

  .hamburger {
    position: relative;
    width: 20px;
    height: 2px;
    background: #555;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hamburger::before,
  .hamburger::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 2px;
    background: #555;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hamburger::before {
    top: -6px;
  }

  .hamburger::after {
    bottom: -6px;
  }

  .nav-mobile-toggle.active .hamburger {
    background: transparent;
  }

  .nav-mobile-toggle.active .hamburger::before {
    top: 0;
    transform: rotate(45deg);
    background: #d35400;
  }

  .nav-mobile-toggle.active .hamburger::after {
    bottom: 0;
    transform: rotate(-45deg);
    background: #d35400;
  }

  /* Mobile Menu */
  .nav-mobile-menu {
    position: fixed;
    top: var(--nav-height, 68px);
    left: 0;
    right: 0;
    bottom: 0;
    background: #fff;
    overflow-y: auto;
    overflow-x: hidden;
    transform: translateX(-100%);
    transition: transform 0.35s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 190;
    visibility: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0);
  }

  .nav-mobile-menu.active {
    transform: translateX(0);
    visibility: visible;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
  }

  /* Mobile menu scrollbar styling */
  .nav-mobile-menu::-webkit-scrollbar {
    width: 8px;
  }

  .nav-mobile-menu::-webkit-scrollbar-track {
    background: rgba(211, 84, 0, 0.05);
  }

  .nav-mobile-menu::-webkit-scrollbar-thumb {
    background: rgba(211, 84, 0, 0.25);
    border-radius: 4px;
  }

  .nav-mobile-menu::-webkit-scrollbar-thumb:hover {
    background: rgba(211, 84, 0, 0.4);
  }

  /* Hide mobile menu on desktop */
  @media (min-width: 1025px) {
    .nav-mobile-menu {
      display: none;
    }
  }

  .mobile-section {
    padding: 1.5rem 1.25rem;
    border-bottom: 1px solid rgba(211, 84, 0, 0.12);
  }

  .mobile-section-title {
    font-family: "Playfair Display", serif;
    font-size: 1rem;
    font-weight: 700;
    color: #d35400;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    margin: 0 0 1rem 0;
  }

  .mobile-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.25rem;
    margin-bottom: 0.625rem;
    color: #2c2c2c;
    text-decoration: none;
    font-size: 1rem;
    font-weight: 500;
    background: #fff;
    border: 1px solid rgba(211, 84, 0, 0.12);
    border-radius: 6px;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    min-height: 48px;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .mobile-item:active {
    transform: scale(0.98);
  }

  .mobile-item:hover {
    background: rgba(250, 248, 243, 0.8);
    border-color: rgba(211, 84, 0, 0.3);
    color: #d35400;
    box-shadow: 0 2px 8px rgba(211, 84, 0, 0.08);
  }

  .mobile-item.active {
    background: rgba(211, 84, 0, 0.08);
    border-color: rgba(211, 84, 0, 0.35);
    color: #d35400;
    font-weight: 600;
    box-shadow: 0 0 0 1px rgba(211, 84, 0, 0.15);
  }

  .item-name {
    flex: 1;
    line-height: 1.4;
  }

  .item-count {
    background: rgba(211, 84, 0, 0.1);
    color: #d35400;
    padding: 0.25rem 0.625rem;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: 700;
    min-width: 28px;
    text-align: center;
  }

  .mobile-item.active .item-count {
    background: #d35400;
    color: white;
  }

  .mobile-collapsible-group {
    margin-bottom: 0.5rem;
  }

  .mobile-category-header {
    display: flex;
    align-items: stretch;
    gap: 0.5rem;
  }

  .mobile-category-header .mobile-item {
    flex: 1;
    margin-bottom: 0;
    border-radius: 6px 0 0 6px;
  }

  .mobile-item.main-category {
    font-weight: 600;
    background: rgba(211, 84, 0, 0.05);
    border-left: 3px solid rgba(211, 84, 0, 0.3);
  }

  .mobile-collapse-toggle {
    min-width: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #fff;
    border: 1px solid rgba(211, 84, 0, 0.12);
    border-radius: 0 6px 6px 0;
    cursor: pointer;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    color: #999;
    font-family: inherit;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .mobile-collapse-toggle:active {
    background: rgba(211, 84, 0, 0.15);
    color: #d35400;
    transform: scale(0.95);
  }

  .mobile-collapse-toggle:hover {
    background: rgba(250, 248, 243, 0.8);
    border-color: rgba(211, 84, 0, 0.25);
    color: #d35400;
  }

  .mobile-chevron {
    font-size: 0.8rem;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: inline-block;
  }

  .mobile-collapse-toggle[aria-expanded="true"] .mobile-chevron {
    transform: rotate(90deg);
  }

  .mobile-collapse-toggle[aria-expanded="true"] {
    background: rgba(211, 84, 0, 0.08);
    color: #d35400;
    border-color: rgba(211, 84, 0, 0.25);
  }

  .mobile-subcategories {
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    margin-top: 0.5rem;
  }

  .mobile-subcategories.expanded {
    max-height: 600px;
  }

  .mobile-item.subcategory {
    padding: 0.875rem 1rem 0.875rem 2.5rem;
    font-size: 0.95rem;
    margin-left: 0.5rem;
    margin-right: 0.5rem;
    background: rgba(250, 248, 243, 0.5);
    border-left: 2px solid rgba(211, 84, 0, 0.2);
    min-height: 44px;
  }

  .mobile-item.subcategory:hover {
    background: rgba(250, 248, 243, 0.9);
    margin-left: 0.75rem;
  }

  .mobile-item.subcategory.active {
    background: rgba(211, 84, 0, 0.06);
    border-left-color: #d35400;
    margin-left: 0.75rem;
  }

  .mobile-item.subcategory .item-name {
    color: #666;
    font-size: 0.95rem;
  }

  .mobile-item.subcategory.active .item-name {
    color: #d35400;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .nav-center {
      display: none;
    }

    .nav-link-button {
      display: none;
    }

    .nav-right {
      display: none;
    }

    .nav-mobile-toggle {
      display: flex;
    }

    .nav-mobile-menu {
      display: block;
    }

    .logo-text {
      display: none;
    }

    .nav-container {
      padding: 0.75rem 1.25rem;
    }
  }

  /* Mobile Widgets Section */
  @media (max-width: 1024px) {
    .mobile-widgets-section {
      padding: 1.5rem 1.25rem;
      background: linear-gradient(135deg, rgba(211, 84, 0, 0.03) 0%, rgba(250, 248, 243, 0.8) 100%);
      border-bottom: 2px solid rgba(211, 84, 0, 0.15);
    }

    .mobile-widgets-container {
      display: flex;
      flex-direction: column;
      gap: 0.875rem;
    }

    /* Override widget styles for mobile menu integration */
    .mobile-widgets-section .shopping-list-widget,
    .mobile-widgets-section .meal-plan-widget {
      position: static;
      width: 100%;
    }

    .mobile-widgets-section .shopping-list-toggle,
    .mobile-widgets-section .meal-plan-toggle {
      width: 100%;
      justify-content: center;
      padding: 0.875rem 1.25rem;
      font-size: 0.95rem;
      min-height: 52px;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.06);
    }

    .mobile-widgets-section .toggle-text {
      display: inline-block !important;
    }

    .mobile-widgets-section .shopping-list-dropdown,
    .mobile-widgets-section .meal-plan-dropdown {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      max-height: 100vh;
      border: none;
      border-radius: 0;
      z-index: 500;
    }
  }

  @media (max-width: 768px) {
    :root {
      --nav-height: 68px;
    }

    .nav-back-link {
      font-size: 0.7rem;
      padding: 0.4rem 0.75rem;
    }

    .nav-logo {
      font-size: 1.1rem;
    }

    .logo-icon {
      font-size: 1.35rem;
    }
  }

  @media (max-width: 480px) {
    :root {
      --nav-height: 64px;
    }

    .nav-container {
      padding: 0.625rem 1rem;
      gap: 1rem;
    }

    .nav-right {
      gap: 0.5rem;
    }

    .nav-back-link {
      display: none;
    }
  }

  @media print {
    .cuisine-nav {
      display: none !important;
    }
  }
</style>

<script>
  // Dropdown toggles
  const categoriesDropdown = document.getElementById("categoriesDropdown");
  const categoriesToggle = document.getElementById("categoriesToggle");

  // Mobile menu
  const navMobileToggle = document.getElementById("navMobileToggle");
  const navMobileMenu = document.getElementById("navMobileMenu");

  // Toggle categories dropdown
  categoriesToggle?.addEventListener("click", (e) => {
    e.stopPropagation();
    categoriesDropdown?.classList.toggle("active");
  });

  // Close dropdowns on outside click
  document.addEventListener("click", () => {
    categoriesDropdown?.classList.remove("active");
  });

  // Mobile menu toggle
  navMobileToggle?.addEventListener("click", () => {
    console.log("Mobile toggle clicked");
    console.log("Before toggle - navMobileMenu classes:", navMobileMenu?.className);
    navMobileToggle.classList.toggle("active");
    navMobileMenu?.classList.toggle("active");
    console.log("After toggle - navMobileMenu classes:", navMobileMenu?.className);
  });

  // Close mobile menu on link click
  const mobileLinks = document.querySelectorAll(".mobile-item");
  mobileLinks.forEach((link) => {
    link.addEventListener("click", () => {
      navMobileToggle?.classList.remove("active");
      navMobileMenu?.classList.remove("active");
    });
  });

  // Collapsible category groups (desktop)
  const collapseToggles = document.querySelectorAll(".collapse-toggle");

  collapseToggles.forEach((toggle) => {
    const groupId = toggle.getAttribute("data-group-id");
    if (!groupId) return;

    const container = document.querySelector(
      `.subcategories-container[data-group-id="${groupId}"]`
    );

    if (!container) return;

    // Check sessionStorage for saved state
    const savedState = sessionStorage.getItem(`category-${groupId}`);
    if (savedState === "expanded") {
      toggle.setAttribute("aria-expanded", "true");
      container.classList.add("expanded");
    }

    // Add click handler
    toggle.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();

      const isExpanded = toggle.getAttribute("aria-expanded") === "true";

      if (isExpanded) {
        toggle.setAttribute("aria-expanded", "false");
        container.classList.remove("expanded");
        sessionStorage.removeItem(`category-${groupId}`);
      } else {
        toggle.setAttribute("aria-expanded", "true");
        container.classList.add("expanded");
        sessionStorage.setItem(`category-${groupId}`, "expanded");
      }
    });
  });

  // Mobile collapsible category groups
  const mobileCollapseToggles = document.querySelectorAll(
    ".mobile-collapse-toggle"
  );

  mobileCollapseToggles.forEach((toggle) => {
    const groupId = toggle.getAttribute("data-group-id");
    if (!groupId) return;

    const container = document.querySelector(
      `.mobile-subcategories[data-group-id="${groupId}"]`
    );

    if (!container) return;

    // Check sessionStorage for saved state
    const savedState = sessionStorage.getItem(`mobile-${groupId}`);
    if (savedState === "expanded") {
      toggle.setAttribute("aria-expanded", "true");
      container.classList.add("expanded");
    }

    // Add click handler
    toggle.addEventListener("click", (e) => {
      e.preventDefault();
      e.stopPropagation();

      const isExpanded = toggle.getAttribute("aria-expanded") === "true";

      if (isExpanded) {
        toggle.setAttribute("aria-expanded", "false");
        container.classList.remove("expanded");
        sessionStorage.removeItem(`mobile-${groupId}`);
      } else {
        toggle.setAttribute("aria-expanded", "true");
        container.classList.add("expanded");
        sessionStorage.setItem(`mobile-${groupId}`, "expanded");
      }
    });
  });
</script>
