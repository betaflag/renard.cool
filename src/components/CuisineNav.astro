---
import { getCollection } from "astro:content";
import MealPlanWidget from "./MealPlanWidget.astro";
import ShoppingListWidget from "./ShoppingListWidget.astro";
import CategoryMenuItem from "./CategoryMenuItem.astro";
import CollapsibleCategoryGroup from "./CollapsibleCategoryGroup.astro";
import { slugify } from "../lib/slugify";

export interface Props {
  variant?: "index" | "detail";
  activeCategory?: string;
  activeCookbook?: string;
  activeTag?: string;
}

const { variant = "index", activeCategory, activeCookbook, activeTag } = Astro.props;

// Get all recipes to extract categories and tags
const allRecipes = await getCollection("cuisine");

// Count recipes excluding "Petite École" and "Camps Scout" for main listing
const mainListingRecipes = allRecipes.filter(
  (recipe) => recipe.data.cookbook !== "Petite École" && recipe.data.cookbook !== "Camps Scout"
);

// Build hierarchical category structure
interface CategoryNode {
  name: string;
  count: number;
  subcategories?: Map<string, number>;
}

const cookbookMap = new Map<string, CategoryNode>();
const standaloneCategories = new Map<string, number>();

allRecipes.forEach((recipe) => {
  const mainCat = recipe.data.cookbook;

  if (mainCat) {
    // This recipe belongs to a main category (e.g., "Petite École")
    // Its categories array becomes subcategories under the main category
    if (!cookbookMap.has(mainCat)) {
      cookbookMap.set(mainCat, {
        name: mainCat,
        count: 0,
        subcategories: new Map(),
      });
    }
    const node = cookbookMap.get(mainCat)!;
    node.count++;

    // Add subcategories (e.g., "dessert", "collation" under "Petite École")
    recipe.data.categories?.forEach((subcat) => {
      node.subcategories!.set(subcat, (node.subcategories!.get(subcat) || 0) + 1);
    });
  } else {
    // Standalone categories (no main category)
    // These recipes appear in the main listing and standalone category pages
    recipe.data.categories?.forEach((cat) => {
      standaloneCategories.set(cat, (standaloneCategories.get(cat) || 0) + 1);
    });
  }
});

// Sort main categories alphabetically
const mainCategories = Array.from(cookbookMap.values()).sort((a, b) => a.name.localeCompare(b.name));

// Sort standalone categories alphabetically
const categories = Array.from(standaloneCategories.entries()).sort((a, b) => a[0].localeCompare(b[0]));
---

<Fragment>
  <nav class="cuisine-nav" id="cuisineNav">
    <div class="nav-container">
      <div class="nav-left">
        <a href="/cuisine" class="nav-logo">
          <img src="/renard.png" alt="Renard" class="logo-icon" />
          <span class="logo-text">Renardo Cuisine</span>
        </a>

        <div class="nav-dropdown" id="cookbooksDropdown">
          <button class="nav-dropdown-toggle" id="cookbooksToggle">
            {activeCookbook ? activeCookbook.toUpperCase() : 'CUISINE'}
            <span class="dropdown-arrow">▼</span>
          </button>
          <div class="nav-dropdown-menu" id="cookbooksMenu">
            <CategoryMenuItem
              href="/cuisine"
              name="Cuisine"
              count={mainListingRecipes.length}
              isActive={activeCookbook === undefined}
            />
            {mainCategories
              .filter((cookbook) =>
                cookbook.name === "Petite École" ||
                cookbook.name === "Camps Scout"
              )
              .map((cookbook) => (
                <CategoryMenuItem
                  href={`/cuisine/cookbooks/${slugify(cookbook.name)}`}
                  name={cookbook.name}
                  count={cookbook.count}
                  isActive={activeCookbook === cookbook.name}
                />
              ))
            }
          </div>
        </div>

        <div class="nav-dropdown" id="categoriesDropdown">
          <button class="nav-dropdown-toggle" id="categoriesToggle">
            CATÉGORIES
            <span class="dropdown-arrow">▼</span>
          </button>
          <div class="nav-dropdown-menu" id="categoriesMenu">
            {/* Only show the 7 official standalone categories */}
            {categories.map(([category, count]) => (
              <CategoryMenuItem
                href={`/cuisine/categories/${slugify(category)}`}
                name={category}
                count={count}
                isActive={activeCategory === category && !activeCookbook}
              />
            ))}
          </div>
        </div>
      </div>

      <button class="nav-mobile-toggle" id="navMobileToggle">
        <span class="hamburger"></span>
      </button>
    </div>
  </nav>

  <div class="nav-mobile-menu" id="navMobileMenu">
    <div class="mobile-section">
      <h3 class="mobile-section-title">Livres de recettes</h3>
      <a href="/cuisine" class="mobile-item {activeCategory === undefined && activeCookbook === undefined ? 'active' : ''}">
        <span class="item-name">Cuisine</span>
        <span class="item-count">{mainListingRecipes.length}</span>
      </a>
      {mainCategories
        .filter((cookbook) =>
          cookbook.name === "Petite École" ||
          cookbook.name === "Camps Scout"
        )
        .map((cookbook) => (
          <a
            href={`/cuisine/cookbooks/${slugify(cookbook.name)}`}
            class={`mobile-item ${activeCookbook === cookbook.name ? 'active' : ''}`}
          >
            <span class="item-name">{cookbook.name}</span>
            <span class="item-count">{cookbook.count}</span>
          </a>
        ))
      }
    </div>

    <div class="mobile-section">
      <h3 class="mobile-section-title">Catégories</h3>
      {/* Only show the 7 official standalone categories */}
      {categories.map(([category, count]) => (
        <a
          href={`/cuisine/categories/${slugify(category)}`}
          class={`mobile-item ${activeCategory === category && !activeCookbook ? 'active' : ''}`}
        >
          <span class="item-name">{category}</span>
          <span class="item-count">{count}</span>
        </a>
      ))}
    </div>
  </div>

  <!-- FAB Widgets (always visible) -->
  <ShoppingListWidget />
  <MealPlanWidget />
</Fragment>

<style is:global>
  :root {
    --nav-height: 68px;
  }

  .cuisine-nav {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 200;
    background: rgba(250, 248, 243, 0.95);
    backdrop-filter: blur(10px);
    border-bottom: 1px solid rgba(211, 84, 0, 0.15);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.04);
  }

  .nav-container {
    max-width: 1400px;
    margin: 0 auto;
    padding: 0.875rem 2rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }

  /* Left Section */
  .nav-left {
    display: flex;
    align-items: center;
    gap: 1.5rem;
  }

  .nav-logo {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    color: #2c2c2c;
    font-family: "Playfair Display", serif;
    font-weight: 700;
    font-size: 1.25rem;
    transition: color 0.2s ease;
  }

  .nav-logo:hover {
    color: #d35400;
  }

  .logo-icon {
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
    object-fit: cover;
  }

  .nav-link-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid rgba(211, 84, 0, 0.2);
    border-radius: 2rem;
    color: #555;
    font-size: 0.85rem;
    font-weight: 600;
    letter-spacing: 0.03em;
    text-decoration: none;
    transition: all 0.2s ease;
    text-transform: uppercase;
    font-family: "Crimson Pro", serif;
  }

  .nav-link-button:hover,
  .nav-link-button.active {
    background: rgba(211, 84, 0, 0.05);
    border-color: rgba(211, 84, 0, 0.4);
    color: #d35400;
  }

  .nav-dropdown {
    position: relative;
  }

  .nav-dropdown-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.625rem 1.25rem;
    background: #fff;
    border: none;
    border-radius: 6px;
    color: #555;
    font-size: 0.85rem;
    font-weight: 600;
    letter-spacing: 0.03em;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    text-transform: uppercase;
    font-family: "Crimson Pro", serif;
    box-shadow:
      0 0 0 1px rgba(211, 84, 0, 0.15),
      0 1px 2px rgba(0, 0, 0, 0.05);
  }

  .nav-dropdown-toggle:hover {
    background: rgba(250, 248, 243, 1);
    box-shadow:
      0 0 0 1px rgba(211, 84, 0, 0.3),
      0 2px 4px rgba(0, 0, 0, 0.08);
    color: #d35400;
  }

  .nav-dropdown.active .nav-dropdown-toggle {
    background: rgba(211, 84, 0, 0.08);
    box-shadow:
      0 0 0 2px rgba(211, 84, 0, 0.4),
      0 2px 4px rgba(0, 0, 0, 0.08);
    color: #d35400;
  }

  .dropdown-arrow {
    font-size: 0.65rem;
    transition: transform 0.2s ease;
  }

  .nav-dropdown.active .dropdown-arrow {
    transform: rotate(180deg);
  }

  .nav-dropdown-menu {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    width: 280px;
    max-height: 420px;
    overflow-y: auto;
    overflow-x: hidden;
    background: #fff;
    border: 1px solid rgba(211, 84, 0, 0.12);
    border-radius: 8px;
    box-shadow:
      0 4px 6px rgba(0, 0, 0, 0.05),
      0 10px 20px rgba(0, 0, 0, 0.08),
      0 0 0 1px rgba(211, 84, 0, 0.08);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-8px);
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 300;
    contain: layout;
  }

  .nav-dropdown.active .nav-dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }


  /* Mobile Toggle */
  .nav-mobile-toggle {
    display: none;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 44px;
    height: 44px;
    background: transparent;
    border: 1px solid rgba(211, 84, 0, 0.2);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .nav-mobile-toggle:hover {
    background: rgba(211, 84, 0, 0.05);
    border-color: rgba(211, 84, 0, 0.4);
    transform: scale(1.05);
  }

  .nav-mobile-toggle:active {
    transform: scale(0.95);
  }

  .nav-mobile-toggle.active {
    background: rgba(211, 84, 0, 0.08);
    border-color: rgba(211, 84, 0, 0.4);
  }

  .hamburger {
    position: relative;
    width: 20px;
    height: 2px;
    background: #555;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hamburger::before,
  .hamburger::after {
    content: "";
    position: absolute;
    width: 100%;
    height: 2px;
    background: #555;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .hamburger::before {
    top: -6px;
  }

  .hamburger::after {
    bottom: -6px;
  }

  .nav-mobile-toggle.active .hamburger {
    background: transparent;
  }

  .nav-mobile-toggle.active .hamburger::before {
    top: 0;
    transform: rotate(45deg);
    background: #d35400;
  }

  .nav-mobile-toggle.active .hamburger::after {
    bottom: 0;
    transform: rotate(-45deg);
    background: #d35400;
  }

  /* Mobile Menu */
  .nav-mobile-menu {
    position: fixed;
    top: var(--nav-height, 68px);
    left: 0;
    right: 0;
    bottom: 0;
    background: #fff;
    overflow-y: auto;
    overflow-x: hidden;
    transform: translateX(-100%);
    transition: transform 0.35s cubic-bezier(0.4, 0, 0.2, 1);
    z-index: 190;
    visibility: hidden;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0);
  }

  .nav-mobile-menu.active {
    transform: translateX(0);
    visibility: visible;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.12);
  }

  /* Mobile menu scrollbar styling */
  .nav-mobile-menu::-webkit-scrollbar {
    width: 8px;
  }

  .nav-mobile-menu::-webkit-scrollbar-track {
    background: rgba(211, 84, 0, 0.05);
  }

  .nav-mobile-menu::-webkit-scrollbar-thumb {
    background: rgba(211, 84, 0, 0.25);
    border-radius: 4px;
  }

  .nav-mobile-menu::-webkit-scrollbar-thumb:hover {
    background: rgba(211, 84, 0, 0.4);
  }

  /* Hide mobile menu on desktop */
  @media (min-width: 1025px) {
    .nav-mobile-menu {
      display: none;
    }
  }

  .mobile-section {
    padding: 1.5rem 1.25rem;
    border-bottom: 1px solid rgba(211, 84, 0, 0.12);
  }

  .mobile-section-title {
    font-family: "Playfair Display", serif;
    font-size: 1rem;
    font-weight: 700;
    color: #d35400;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    margin: 0 0 1rem 0;
  }

  .mobile-item {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem 1.25rem;
    margin-bottom: 0.625rem;
    color: #2c2c2c;
    text-decoration: none;
    font-size: 1rem;
    font-weight: 500;
    background: #fff;
    border: 1px solid rgba(211, 84, 0, 0.12);
    border-radius: 6px;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    min-height: 48px;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .mobile-item:active {
    transform: scale(0.98);
  }

  .mobile-item:hover {
    background: rgba(250, 248, 243, 0.8);
    border-color: rgba(211, 84, 0, 0.3);
    color: #d35400;
    box-shadow: 0 2px 8px rgba(211, 84, 0, 0.08);
  }

  .mobile-item.active {
    background: rgba(211, 84, 0, 0.08);
    border-color: rgba(211, 84, 0, 0.35);
    color: #d35400;
    font-weight: 600;
    box-shadow: 0 0 0 1px rgba(211, 84, 0, 0.15);
  }

  .item-name {
    flex: 1;
    line-height: 1.4;
  }

  .item-count {
    background: rgba(211, 84, 0, 0.1);
    color: #d35400;
    padding: 0.25rem 0.625rem;
    border-radius: 12px;
    font-size: 0.85rem;
    font-weight: 700;
    min-width: 28px;
    text-align: center;
  }

  .mobile-item.active .item-count {
    background: #d35400;
    color: white;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    .nav-center {
      display: none;
    }

    .nav-link-button {
      display: none;
    }

    .nav-mobile-toggle {
      display: flex;
    }

    .nav-mobile-menu {
      display: block;
    }

    .logo-text {
      display: none;
    }

    .nav-container {
      padding: 0.75rem 1.25rem;
    }
  }

  @media (max-width: 768px) {
    :root {
      --nav-height: 68px;
    }

    .nav-back-link {
      font-size: 0.7rem;
      padding: 0.4rem 0.75rem;
    }

    .nav-logo {
      font-size: 1.1rem;
    }

    .logo-icon {
      width: 1.75rem;
      height: 1.75rem;
    }
  }

  @media (max-width: 480px) {
    :root {
      --nav-height: 64px;
    }

    .nav-container {
      padding: 0.625rem 1rem;
      gap: 1rem;
    }

    .nav-right {
      gap: 0.5rem;
    }

    .nav-back-link {
      display: none;
    }
  }

  @media print {
    .cuisine-nav {
      display: none !important;
    }
  }
</style>

<script>
  // Dropdown toggles
  const cookbooksDropdown = document.getElementById("cookbooksDropdown");
  const cookbooksToggle = document.getElementById("cookbooksToggle");
  const categoriesDropdown = document.getElementById("categoriesDropdown");
  const categoriesToggle = document.getElementById("categoriesToggle");

  // Mobile menu
  const navMobileToggle = document.getElementById("navMobileToggle");
  const navMobileMenu = document.getElementById("navMobileMenu");

  // Toggle cookbooks dropdown
  cookbooksToggle?.addEventListener("click", (e) => {
    e.stopPropagation();
    cookbooksDropdown?.classList.toggle("active");
    // Close categories dropdown when opening cookbooks
    categoriesDropdown?.classList.remove("active");
  });

  // Toggle categories dropdown
  categoriesToggle?.addEventListener("click", (e) => {
    e.stopPropagation();
    categoriesDropdown?.classList.toggle("active");
    // Close cookbooks dropdown when opening categories
    cookbooksDropdown?.classList.remove("active");
  });

  // Close dropdowns on outside click
  document.addEventListener("click", () => {
    cookbooksDropdown?.classList.remove("active");
    categoriesDropdown?.classList.remove("active");
  });

  // Mobile menu toggle
  navMobileToggle?.addEventListener("click", () => {
    console.log("Mobile toggle clicked");
    console.log("Before toggle - navMobileMenu classes:", navMobileMenu?.className);
    navMobileToggle.classList.toggle("active");
    navMobileMenu?.classList.toggle("active");
    console.log("After toggle - navMobileMenu classes:", navMobileMenu?.className);
  });

  // Close mobile menu on link click
  const mobileLinks = document.querySelectorAll(".mobile-item");
  mobileLinks.forEach((link) => {
    link.addEventListener("click", () => {
      navMobileToggle?.classList.remove("active");
      navMobileMenu?.classList.remove("active");
    });
  });
</script>
