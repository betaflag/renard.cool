---
import { getCollection } from "astro:content";
import { Calendar } from "lucide-astro";

// Fetch all recipes for name lookup
const allRecipes = await getCollection("cuisine");
const recipeMap = Object.fromEntries(
  allRecipes.map((recipe) => [recipe.id, recipe.data.name])
);
---

<div class="meal-plan-widget" id="mealPlanWidget" data-recipe-map={JSON.stringify(recipeMap)}>
  <button class="meal-plan-toggle" id="mealPlanToggle">
    <Calendar size={16} />
    <span class="toggle-text">Plan repas</span>
    <span class="meal-count" id="mealCount">0</span>
  </button>

  <div class="meal-plan-dropdown" id="mealPlanDropdown">
    <div class="dropdown-header">
      <h3 class="dropdown-title">Mon plan repas</h3>
      <button class="close-btn" id="closeMealPlanDropdown" aria-label="Fermer">×</button>
    </div>

    <div class="meal-list" id="mealList">
      <!-- Populated by JavaScript -->
    </div>

    <div class="empty-state" id="emptyState">
      <p>Aucun repas planifié</p>
      <small>Ajoutez des recettes à votre plan!</small>
    </div>
  </div>
</div>

<style is:global>
  .meal-plan-widget {
    position: relative;
    z-index: 200;
  }

  .meal-plan-widget:has(.meal-plan-dropdown.active) {
    z-index: 400;
  }

  .meal-plan-toggle {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(250, 248, 243, 0.9);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(211, 84, 0, 0.2);
    border-radius: 2rem;
    color: #555;
    font-size: 0.85rem;
    font-weight: 600;
    letter-spacing: 0.03em;
    cursor: pointer;
    transition: all 0.2s ease;
    text-transform: uppercase;
  }

  .meal-plan-toggle svg {
    flex-shrink: 0;
  }

  .meal-plan-toggle:hover {
    background: rgba(250, 248, 243, 1);
    border-color: rgba(211, 84, 0, 0.4);
    color: #d35400;
    transform: translateY(-1px);
  }

  .toggle-text {
    font-family: "Crimson Pro", serif;
  }

  .meal-count {
    background: #d35400;
    color: white;
    border-radius: 50%;
    width: 1.5rem;
    height: 1.5rem;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    font-weight: 700;
  }

  .meal-count:empty {
    display: none;
  }

  /* Dropdown */
  .meal-plan-dropdown {
    position: absolute;
    top: calc(100% + 0.75rem);
    right: 0;
    width: 380px;
    max-height: 500px;
    background: #fff;
    border: 2px solid rgba(211, 84, 0, 0.2);
    box-shadow:
      0 4px 12px rgba(0, 0, 0, 0.08),
      0 12px 32px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    z-index: 300;
  }

  .meal-plan-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.25rem 1.5rem;
    border-bottom: 1px solid rgba(211, 84, 0, 0.12);
  }

  .dropdown-title {
    font-family: "Playfair Display", serif;
    font-size: 1.25rem;
    font-weight: 700;
    color: #2c2c2c;
    margin: 0;
  }

  .close-btn {
    background: none;
    border: none;
    font-size: 1.75rem;
    color: #999;
    cursor: pointer;
    padding: 0;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.2s ease;
    line-height: 1;
  }

  .close-btn:hover {
    color: #d35400;
  }

  .meal-list {
    flex: 1;
    overflow-y: auto;
    padding: 1rem 1.5rem;
  }

  .meal-item {
    position: relative;
    display: block;
    padding: 1.25rem 5rem 1.25rem 1.25rem;
    margin-bottom: 0.5rem;
    background: #fff;
    border: 1px solid rgba(211, 84, 0, 0.15);
    border-radius: 0;
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
  }

  .meal-item:hover {
    background: rgba(250, 248, 243, 0.6);
    border-color: rgba(211, 84, 0, 0.3);
    transform: translateX(3px);
    box-shadow:
      -3px 0 0 #d35400,
      0 2px 8px rgba(211, 84, 0, 0.12);
  }

  .meal-item:last-child {
    margin-bottom: 0;
  }

  .meal-number {
    font-family: "Playfair Display", serif;
    font-size: 0.7rem;
    font-weight: 700;
    color: #d35400;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    margin-bottom: 0.5rem;
    display: block;
    opacity: 0.9;
  }

  .meal-name-link {
    text-decoration: none;
    display: block;
    transition: all 0.2s ease;
  }

  .meal-name-link:hover .meal-name {
    color: #d35400;
  }

  .meal-name {
    display: block;
    font-size: 1rem;
    font-weight: 500;
    color: #2c2c2c;
    line-height: 1.5;
    padding-right: 0.5rem;
    transition: color 0.2s ease;
  }

  .meal-actions {
    position: absolute;
    top: 50%;
    right: 1rem;
    transform: translateY(-50%);
    display: flex;
    gap: 0.35rem;
    flex-direction: column;
  }

  .action-btn {
    background: rgba(250, 248, 243, 0.8);
    border: 1px solid rgba(211, 84, 0, 0.25);
    color: #888;
    cursor: pointer;
    padding: 0.4rem 0.55rem;
    font-size: 0.7rem;
    border-radius: 2px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    line-height: 1;
    font-weight: 600;
    min-width: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
  }

  .action-btn:hover {
    background: #d35400;
    color: white;
    border-color: #d35400;
    transform: scale(1.08);
    box-shadow: 0 2px 4px rgba(211, 84, 0, 0.2);
  }

  .action-btn:active {
    transform: scale(0.95);
  }

  .action-btn:disabled {
    opacity: 0.2;
    cursor: not-allowed;
  }

  .action-btn:disabled:hover {
    background: rgba(250, 248, 243, 0.8);
    color: #888;
    border-color: rgba(211, 84, 0, 0.25);
    transform: none;
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.04);
  }

  .remove-btn {
    color: #d35400;
    font-size: 0.9rem;
    font-weight: 700;
  }

  .remove-btn:hover {
    background: #d35400;
    color: white;
  }

  .empty-state {
    padding: 3rem 2rem;
    text-align: center;
    color: #999;
  }

  .empty-state p {
    font-size: 1rem;
    margin-bottom: 0.5rem;
    color: #555;
  }

  .empty-state small {
    font-size: 0.85rem;
    font-style: italic;
  }

  .empty-state.hidden {
    display: none;
  }

  @media (max-width: 768px) {
    .meal-plan-dropdown {
      width: 320px;
    }

    .toggle-text {
      display: none;
    }

    .meal-item {
      padding: 0.875rem 3.5rem 0.875rem 0.875rem;
    }

    .meal-name {
      font-size: 0.9rem;
    }
  }

  @media (max-width: 480px) {
    .meal-plan-dropdown {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      width: 100%;
      max-height: 100vh;
      border: none;
      border-radius: 0;
    }

    .meal-plan-toggle {
      padding: 0.5rem 0.75rem;
    }

    .meal-item {
      padding: 0.75rem 3rem 0.75rem 0.75rem;
    }

    .meal-actions {
      right: 0.5rem;
    }
  }

  @media print {
    .meal-plan-widget,
    .meal-plan-toggle,
    .meal-plan-dropdown {
      display: none !important;
    }
  }
</style>

<script>
  import {
    getMealPlan,
    removeRecipe,
    reorderMeal,
  } from "../lib/meal-plan-manager.js";

  const widget = document.getElementById("mealPlanWidget");
  const toggle = document.getElementById("mealPlanToggle");
  const dropdown = document.getElementById("mealPlanDropdown");
  const closeBtn = document.getElementById("closeMealPlanDropdown");
  const mealList = document.getElementById("mealList");
  const emptyState = document.getElementById("emptyState");
  const mealCount = document.getElementById("mealCount");

  // Get recipe map from data attribute
  const recipeMap = widget ? JSON.parse(widget.dataset.recipeMap || "{}") : {};

  // Toggle dropdown
  toggle?.addEventListener("click", (e) => {
    e.stopPropagation();
    dropdown?.classList.toggle("active");
  });

  closeBtn?.addEventListener("click", () => {
    dropdown?.classList.remove("active");
  });

  // Close on outside click
  document.addEventListener("click", (e) => {
    if (e.target && !(e.target as HTMLElement).closest(".meal-plan-widget")) {
      dropdown?.classList.remove("active");
    }
  });

  // Render meal plan
  function renderMealPlan() {
    const mealPlan = getMealPlan();

    // Update count
    if (mealCount) {
      mealCount.textContent = mealPlan.length > 0 ? String(mealPlan.length) : "";
    }

    // Show/hide empty state
    if (mealList && emptyState) {
      if (mealPlan.length === 0) {
        mealList.innerHTML = "";
        emptyState.classList.remove("hidden");
        return;
      }

      emptyState.classList.add("hidden");

      // Render meals
      mealList.innerHTML = mealPlan
        .map((recipeId, index) => {
          const recipeName = recipeMap[recipeId] || "Recette inconnue";
          return `
          <div class="meal-item" data-recipe-id="${recipeId}">
            <span class="meal-number">Repas ${index + 1}</span>
            <a href="/cuisine/${recipeId}/" class="meal-name-link">
              <div class="meal-name">${recipeName}</div>
            </a>
            <div class="meal-actions">
              <button class="action-btn move-up" data-index="${index}" ${index === 0 ? "disabled" : ""} aria-label="Monter">↑</button>
              <button class="action-btn move-down" data-index="${index}" ${index === mealPlan.length - 1 ? "disabled" : ""} aria-label="Descendre">↓</button>
              <button class="action-btn remove-btn" data-recipe-id="${recipeId}" aria-label="Retirer">×</button>
            </div>
          </div>
        `;
        })
        .join("");

      // Add event listeners
      mealList.querySelectorAll(".move-up").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.stopPropagation();
          const index = parseInt((btn as HTMLButtonElement).dataset.index || "0");
          reorderMeal(index, index - 1);
          renderMealPlan();
        });
      });

      mealList.querySelectorAll(".move-down").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.stopPropagation();
          const index = parseInt((btn as HTMLButtonElement).dataset.index || "0");
          reorderMeal(index, index + 1);
          renderMealPlan();
        });
      });

      mealList.querySelectorAll(".remove-btn").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.stopPropagation();
          const recipeId = (btn as HTMLButtonElement).dataset.recipeId;
          if (recipeId) {
            removeRecipe(recipeId);
            renderMealPlan();
          }
        });
      });
    }
  }

  // Listen for updates from other components
  window.addEventListener("mealPlanUpdated", () => {
    renderMealPlan();
  });

  // Initial render
  renderMealPlan();
</script>
