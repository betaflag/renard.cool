---
import { ShoppingBasket } from "lucide-astro";
// Shopping List Widget
// No server-side data needed - all data comes from localStorage
---

<div class="shopping-list-widget" id="shoppingListWidget">
  <button class="shopping-list-toggle" id="shoppingListToggle" title="Liste d'épicerie" aria-label="Ouvrir la liste d'épicerie">
    <ShoppingBasket size={16} />
    <span class="toggle-text">Liste d'épicerie</span>
    <span class="item-count" id="itemCount"></span>
  </button>

  <div class="shopping-list-dropdown" id="shoppingListDropdown">
    <div class="dropdown-header">
      <h3 class="dropdown-title">Ma liste d'épicerie</h3>
      <button class="close-btn" id="closeShoppingListDropdown" aria-label="Fermer">×</button>
    </div>

    <div class="shopping-list-content" id="shoppingListContent">
      <!-- Populated by JavaScript -->
    </div>

    <div class="empty-state" id="emptyState">
      <p>Aucun ingrédient</p>
      <small>Ajoutez des ingrédients depuis vos recettes!</small>
    </div>

    <div class="dropdown-actions" id="dropdownActions">
      <button class="action-button secondary" id="removeCheckedBtn">
        Retirer les cochés
      </button>
      <button class="action-button danger" id="clearAllBtn">
        Tout effacer
      </button>
    </div>
  </div>
</div>

<style is:global>
  /* FAB (Floating Action Button) styling */
  .shopping-list-widget {
    position: fixed;
    bottom: 1.5rem;
    right: 1.5rem;
    z-index: 250;
  }

  .shopping-list-widget:has(.shopping-list-dropdown.active) {
    z-index: 400;
  }

  .shopping-list-toggle {
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 56px;
    height: 56px;
    border-radius: 50%;
    padding: 0;
    background: #d35400;
    border: none;
    color: white;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 4px 12px rgba(211, 84, 0, 0.4), 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .shopping-list-toggle svg {
    flex-shrink: 0;
    color: white;
  }

  .shopping-list-toggle:hover {
    background: #b84700;
    transform: scale(1.05);
    box-shadow: 0 6px 16px rgba(211, 84, 0, 0.5), 0 3px 6px rgba(0, 0, 0, 0.25);
  }

  .toggle-text {
    display: none;
  }

  .item-count {
    position: absolute;
    top: -6px;
    right: -6px;
    background: white !important;
    color: #d35400 !important;
    border: 2px solid #d35400;
    border-radius: 50%;
    min-width: 1.75rem;
    height: 1.75rem;
    padding: 0 0.25rem;
    display: flex !important;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem !important;
    font-weight: 700 !important;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    z-index: 2;
    pointer-events: none;
    line-height: 1 !important;
    font-family: "Crimson Pro", serif;
    text-align: center;
    opacity: 1 !important;
    visibility: visible !important;
  }

  .item-count:empty {
    display: none !important;
  }

  /* Dropdown */
  .shopping-list-dropdown {
    position: absolute;
    bottom: calc(100% + 0.75rem);
    right: 0;
    width: 420px;
    max-height: 550px;
    background: #fff;
    border: 2px solid rgba(211, 84, 0, 0.2);
    border-radius: 8px;
    box-shadow:
      0 4px 12px rgba(0, 0, 0, 0.08),
      0 12px 32px rgba(0, 0, 0, 0.1);
    opacity: 0;
    visibility: hidden;
    transform: translateY(10px);
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
    display: flex;
    flex-direction: column;
    z-index: 300;
  }

  .shopping-list-dropdown.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.25rem 1.5rem;
    border-bottom: 1px solid rgba(211, 84, 0, 0.12);
  }

  .dropdown-title {
    font-family: "Playfair Display", serif;
    font-size: 1.25rem;
    font-weight: 700;
    color: #2c2c2c;
    margin: 0;
  }

  .close-btn {
    background: none;
    border: none;
    font-size: 1.75rem;
    color: #999;
    cursor: pointer;
    padding: 0;
    width: 2rem;
    height: 2rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.2s ease;
    line-height: 1;
  }

  .close-btn:hover {
    color: #d35400;
  }

  .shopping-list-content {
    flex: 1;
    overflow-y: auto;
    padding: 1rem 1.5rem;
  }

  /* Recipe Group */
  .recipe-group {
    margin-bottom: 1.5rem;
  }

  .recipe-group:last-child {
    margin-bottom: 0;
  }

  .recipe-group-header {
    font-family: "Playfair Display", serif;
    font-size: 0.9rem;
    font-weight: 700;
    color: #d35400;
    text-transform: uppercase;
    letter-spacing: 0.08em;
    margin-bottom: 0.75rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid rgba(211, 84, 0, 0.15);
  }

  /* Ingredient Item */
  .ingredient-item {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    padding: 0.75rem;
    margin-bottom: 0.5rem;
    background: #fff;
    border: 1px solid rgba(211, 84, 0, 0.12);
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
  }

  .ingredient-item:hover {
    background: rgba(250, 248, 243, 0.6);
    border-color: rgba(211, 84, 0, 0.25);
    transform: translateX(2px);
    box-shadow:
      -2px 0 0 #d35400,
      0 1px 4px rgba(211, 84, 0, 0.1);
  }

  .ingredient-item.checked {
    opacity: 0.6;
    background: rgba(0, 0, 0, 0.02);
  }

  .ingredient-checkbox {
    margin-top: 0.2rem;
    width: 1.125rem;
    height: 1.125rem;
    cursor: pointer;
    flex-shrink: 0;
    accent-color: #d35400;
  }

  .ingredient-details {
    flex: 1;
    min-width: 0;
  }

  .ingredient-main {
    font-size: 0.95rem;
    color: #2c2c2c;
    font-weight: 500;
    line-height: 1.4;
    word-wrap: break-word;
  }

  .ingredient-item.checked .ingredient-main {
    text-decoration: line-through;
    color: #999;
  }

  .ingredient-note {
    font-size: 0.8rem;
    color: #777;
    font-style: italic;
    margin-top: 0.2rem;
    line-height: 1.3;
  }

  .ingredient-item.checked .ingredient-note {
    color: #aaa;
  }

  .remove-ingredient-btn {
    background: none;
    border: 1px solid rgba(211, 84, 0, 0.2);
    color: #d35400;
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    font-size: 0.85rem;
    border-radius: 2px;
    transition: all 0.2s ease;
    line-height: 1;
    font-weight: 700;
    flex-shrink: 0;
  }

  .remove-ingredient-btn:hover {
    background: #d35400;
    color: white;
    border-color: #d35400;
  }

  .empty-state {
    padding: 3rem 2rem;
    text-align: center;
    color: #999;
  }

  .empty-state p {
    font-size: 1rem;
    margin-bottom: 0.5rem;
    color: #555;
  }

  .empty-state small {
    font-size: 0.85rem;
    font-style: italic;
  }

  .empty-state.hidden {
    display: none;
  }

  /* Dropdown Actions */
  .dropdown-actions {
    padding: 1rem 1.5rem;
    border-top: 1px solid rgba(211, 84, 0, 0.12);
    display: flex;
    gap: 0.75rem;
    background: rgba(250, 248, 243, 0.3);
  }

  .dropdown-actions.hidden {
    display: none;
  }

  .action-button {
    flex: 1;
    padding: 0.625rem 1rem;
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    border-radius: 2px;
    transition: all 0.2s ease;
    border: 1px solid;
    font-family: "Crimson Pro", serif;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
  }

  .action-button.secondary {
    background: #fff;
    border-color: rgba(211, 84, 0, 0.3);
    color: #d35400;
  }

  .action-button.secondary:hover {
    background: #d35400;
    color: white;
    border-color: #d35400;
  }

  .action-button.danger {
    background: #fff;
    border-color: rgba(200, 50, 50, 0.3);
    color: #c83232;
  }

  .action-button.danger:hover {
    background: #c83232;
    color: white;
    border-color: #c83232;
  }

  /* Mobile: fullscreen dropdown */
  @media (max-width: 768px) {
    .shopping-list-dropdown {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      max-height: 100vh;
      border: none;
      border-radius: 0;
      z-index: 500;
    }

    .ingredient-item {
      padding: 0.625rem;
    }

    .ingredient-main {
      font-size: 0.875rem;
    }
  }

  @media (max-width: 480px) {
    .ingredient-item {
      padding: 0.5rem;
    }

    .dropdown-actions {
      flex-direction: column;
      gap: 0.5rem;
      padding: 1rem 1.5rem 1.25rem;
    }

    .action-button {
      padding: 0.875rem 1rem;
      font-size: 0.85rem;
      min-height: 44px;
    }
  }

  @media print {
    .shopping-list-widget,
    .shopping-list-toggle,
    .shopping-list-dropdown {
      display: none !important;
    }
  }
</style>

<script>
  import {
    getShoppingList,
    removeIngredient,
    toggleChecked,
    removeCheckedItems,
    clearShoppingList,
  } from "../lib/shopping-list-manager.js";

  const widget = document.getElementById("shoppingListWidget");
  const toggle = document.getElementById("shoppingListToggle");
  const dropdown = document.getElementById("shoppingListDropdown");
  const closeBtn = document.getElementById("closeShoppingListDropdown");
  const content = document.getElementById("shoppingListContent");
  const emptyState = document.getElementById("emptyState");
  const itemCount = document.getElementById("itemCount");
  const dropdownActions = document.getElementById("dropdownActions");
  const removeCheckedBtn = document.getElementById("removeCheckedBtn");
  const clearAllBtn = document.getElementById("clearAllBtn");

  // Toggle dropdown
  toggle?.addEventListener("click", (e) => {
    e.stopPropagation();
    dropdown?.classList.toggle("active");
  });

  closeBtn?.addEventListener("click", () => {
    dropdown?.classList.remove("active");
  });

  // Close on outside click
  document.addEventListener("click", (e) => {
    if (e.target && !(e.target as HTMLElement).closest(".shopping-list-widget")) {
      dropdown?.classList.remove("active");
    }
  });

  // Remove checked items
  removeCheckedBtn?.addEventListener("click", (e) => {
    e.preventDefault();
    e.stopPropagation();
    const checkedCount = getShoppingList().filter(item => item.checked).length;
    if (checkedCount === 0) {
      alert("Aucun ingrédient coché à retirer.");
      return;
    }
    if (confirm(`Retirer ${checkedCount} ingrédient${checkedCount > 1 ? 's' : ''} coché${checkedCount > 1 ? 's' : ''}?`)) {
      removeCheckedItems();
      renderShoppingList();
    }
  });

  // Clear all
  clearAllBtn?.addEventListener("click", (e) => {
    e.preventDefault();
    e.stopPropagation();
    const totalCount = getShoppingList().length;
    if (totalCount === 0) {
      alert("La liste est déjà vide.");
      return;
    }
    if (confirm(`Effacer tous les ${totalCount} ingrédients de la liste?`)) {
      clearShoppingList();
      renderShoppingList();
    }
  });

  // Render shopping list
  function renderShoppingList() {
    const shoppingList = getShoppingList();

    // Update count
    if (itemCount) {
      const count = shoppingList.length;
      if (count > 0) {
        itemCount.textContent = String(count);
        itemCount.style.display = 'flex';
        itemCount.style.visibility = 'visible';
        itemCount.style.opacity = '1';
        itemCount.style.color = '#d35400';
        itemCount.style.fontSize = '0.75rem';
        itemCount.style.fontWeight = '700';
      } else {
        itemCount.textContent = "";
        itemCount.style.display = 'none';
      }
    }

    // Show/hide empty state and actions
    if (content && emptyState && dropdownActions) {
      if (shoppingList.length === 0) {
        content.innerHTML = "";
        emptyState.classList.remove("hidden");
        dropdownActions.classList.add("hidden");
        return;
      }

      emptyState.classList.add("hidden");
      dropdownActions.classList.remove("hidden");

      // Group ingredients by recipe
      const groupedByRecipe = shoppingList.reduce((groups, item) => {
        if (!groups[item.recipeId]) {
          groups[item.recipeId] = {
            recipeName: item.recipeName,
            items: []
          };
        }
        groups[item.recipeId].items.push(item);
        return groups;
      }, {} as Record<string, { recipeName: string; items: any[] }>);

      // Render grouped ingredients
      content.innerHTML = Object.entries(groupedByRecipe)
        .map(([recipeId, group]) => {
          const itemsHtml = group.items
            .map((item) => {
              // Build display text
              let displayText = '';
              if (item.quantity && item.unit) {
                displayText = `${item.quantity} ${item.unit} de ${item.ingredient}`;
              } else if (item.quantity) {
                displayText = `${item.quantity} ${item.ingredient}`;
              } else {
                displayText = item.ingredient;
              }

              return `
                <div class="ingredient-item ${item.checked ? 'checked' : ''}" data-id="${item.id}">
                  <input
                    type="checkbox"
                    class="ingredient-checkbox"
                    ${item.checked ? 'checked' : ''}
                    data-id="${item.id}"
                  />
                  <div class="ingredient-details">
                    <div class="ingredient-main">${displayText}</div>
                    ${item.note ? `<div class="ingredient-note">${item.note}</div>` : ''}
                  </div>
                  <button
                    class="remove-ingredient-btn"
                    data-id="${item.id}"
                    aria-label="Retirer"
                  >×</button>
                </div>
              `;
            })
            .join("");

          return `
            <div class="recipe-group">
              <div class="recipe-group-header">${group.recipeName}</div>
              ${itemsHtml}
            </div>
          `;
        })
        .join("");

      // Add event listeners
      content.querySelectorAll(".ingredient-checkbox").forEach((checkbox) => {
        checkbox.addEventListener("change", (e) => {
          e.stopPropagation();
          const id = (checkbox as HTMLInputElement).dataset.id;
          if (id) {
            toggleChecked(id);
            renderShoppingList();
          }
        });
      });

      content.querySelectorAll(".remove-ingredient-btn").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.stopPropagation();
          const id = (btn as HTMLButtonElement).dataset.id;
          if (id) {
            removeIngredient(id);
            renderShoppingList();
          }
        });
      });
    }
  }

  // Listen for updates from other components
  window.addEventListener("shoppingListUpdated", () => {
    renderShoppingList();
  });

  // Initial render
  renderShoppingList();
</script>
