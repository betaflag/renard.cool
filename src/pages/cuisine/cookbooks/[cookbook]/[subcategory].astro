---
import { getCollection } from "astro:content";
import CuisineLayout from "../../../../layouts/CuisineLayout.astro";
import CuisineNav from "../../../../components/CuisineNav.astro";
import RecipesListing from "../../../../components/RecipesListing.astro";
import { slugify } from "../../../../lib/slugify";

export async function getStaticPaths() {
  const allRecipes = await getCollection("cuisine");

  // Build a map of main categories to their subcategories
  const paths: any[] = [];

  allRecipes.forEach((recipe) => {
    if (recipe.data.cookbook && recipe.data.categories) {
      recipe.data.categories.forEach((subcategory) => {
        paths.push({
          cookbook: recipe.data.cookbook,
          subcategory,
        });
      });
    }
  });

  // Deduplicate by creating a unique key
  const uniquePaths = Array.from(
    new Set(paths.map((p) => `${p.cookbook}|||${p.subcategory}`))
  ).map((key) => {
    const [cookbook, subcategory] = key.split("|||");
    return { cookbook, subcategory };
  });

  // Generate pages using slugified URLs
  return uniquePaths.map(({ cookbook, subcategory }) => ({
    params: {
      cookbook: slugify(cookbook),
      subcategory: slugify(subcategory)
    },
    props: {
      cookbook,
      subcategory,
      cookbookSlug: slugify(cookbook),
      subcategorySlug: slugify(subcategory),
      recipes: allRecipes
        .filter(
          (recipe) =>
            recipe.data.cookbook === cookbook &&
            recipe.data.categories?.includes(subcategory)
        )
        .sort(
          (a, b) =>
            new Date(b.data.pubDate).valueOf() -
            new Date(a.data.pubDate).valueOf()
        ),
    },
  }));
}

const { cookbook, subcategory, cookbookSlug, subcategorySlug, recipes } = Astro.props;

// Capitalize for display
const subcategoryDisplay =
  subcategory.charAt(0).toUpperCase() + subcategory.slice(1);
---

<CuisineLayout
  title={`${cookbook} - ${subcategoryDisplay} | Renardo Cuisine`}
  description={`Recettes de ${subcategory} pour ${cookbook}`}
>
  <CuisineNav
    variant="index"
    activeCookbook={cookbook}
    activeCategory={subcategory}
  />

  <main>
    <div class="header-section">
      <div class="breadcrumb">
        <a href="/">Accueil</a>
        <span class="separator">›</span>
        <a href="/cuisine">Cuisine</a>
        <span class="separator">›</span>
        <a href={`/cuisine/cookbooks/${cookbookSlug}`}
          >{cookbook}</a
        >
        <span class="separator">›</span>
        <span class="current">{subcategoryDisplay}</span>
      </div>

      <h1 class="page-title">
        <span class="main-cat">{cookbook}</span>
        <span class="separator-icon">›</span>
        <span class="accent">{subcategoryDisplay}</span>
      </h1>
      <p class="subtitle">
        {recipes.length} recette{recipes.length > 1 ? "s" : ""} dans cette sous-catégorie
      </p>
    </div>

    <RecipesListing recipes={recipes} />
  </main>

  <style>
    main {
      position: relative;
      z-index: 10;
      max-width: 1200px;
      margin: 0 auto;
      padding: 6rem 2rem 4rem;
    }

    .header-section {
      text-align: center;
      margin-bottom: 4rem;
      padding-bottom: 3rem;
      border-bottom: 2px solid rgba(211, 84, 0, 0.15);
      animation: fadeInUp 0.8s ease-out;
      position: relative;
    }

    .header-section::after {
      content: "✦";
      position: absolute;
      bottom: -0.75rem;
      left: 50%;
      transform: translateX(-50%);
      font-size: 1.25rem;
      color: #d35400;
      background: #faf8f3;
      padding: 0 1rem;
    }

    .breadcrumb {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.5rem;
      margin-bottom: 2rem;
      font-size: 0.85rem;
      color: #999;
      flex-wrap: wrap;
    }

    .breadcrumb a {
      color: #999;
      text-decoration: none;
      transition: color 0.2s ease;
    }

    .breadcrumb a:hover {
      color: #d35400;
    }

    .breadcrumb .separator {
      color: #ccc;
    }

    .breadcrumb .current {
      color: #d35400;
      font-weight: 600;
      text-transform: capitalize;
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .page-title {
      font-family: "Playfair Display", serif;
      font-weight: 900;
      font-size: clamp(2.5rem, 7vw, 4rem);
      line-height: 1.2;
      letter-spacing: -0.03em;
      color: #2c2c2c;
      margin-bottom: 1.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      flex-wrap: wrap;
    }

    .main-cat {
      color: #666;
      font-weight: 600;
      font-size: 0.7em;
    }

    .separator-icon {
      color: #ccc;
      font-weight: 300;
      font-size: 0.8em;
    }

    .accent {
      color: #d35400;
      font-style: italic;
      display: inline-block;
      text-transform: capitalize;
    }

    .subtitle {
      font-size: clamp(1rem, 2.5vw, 1.35rem);
      color: #777;
      font-weight: 400;
      font-style: italic;
      letter-spacing: 0.02em;
      max-width: 600px;
      margin: 0 auto;
    }

    @media (max-width: 768px) {
      main {
        padding: 5.5rem 1.25rem 3rem;
      }

      .header-section {
        margin-bottom: 3rem;
        padding-bottom: 2.5rem;
      }

      .breadcrumb {
        font-size: 0.75rem;
        margin-bottom: 1.5rem;
      }

      .page-title {
        font-size: clamp(2rem, 9vw, 2.75rem);
        margin-bottom: 1.25rem;
        flex-direction: column;
        gap: 0.5rem;
      }

      .subtitle {
        font-size: 1rem;
      }
    }
  </style>
</CuisineLayout>
