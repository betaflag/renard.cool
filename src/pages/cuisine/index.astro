---
import { getCollection } from "astro:content";

const recipes = (await getCollection("cuisine")).sort(
  (a, b) =>
    new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
);

const categories = [
  ...new Set(recipes.flatMap((recipe) => recipe.data.categories)),
].sort();
---

<html lang="fr">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/png" href="/renard.png" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Renardo Cuisine | Recettes fut√©es</title>
    <meta
      name="description"
      content="D√©couvrez les recettes secr√®tes du renard cuisinier"
    />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,400;0,700;0,900;1,400;1,700&family=Crimson+Pro:ital,wght@0,300;0,400;0,500;1,400&display=swap"
      rel="stylesheet"
    />
  </head>
  <body>
    <div class="grain"></div>

    <header>
      <nav class="top-nav">
        <a href="/" class="home-link">‚Üê Accueil</a>
      </nav>
    </header>

    <main>
      <div class="header-section">
        <h1 class="page-title">
          <span class="accent">Renardo</span> Cuisine
        </h1>
        <p class="subtitle">Recettes fut√©es mijot√©es avec passion</p>
      </div>

      <div class="categories">
        <button class="category-filter active" data-category="all"
          >Toutes les recettes</button
        >
        {
          categories.map((category) => (
            <button class="category-filter" data-category={category}>
              {category}
            </button>
          ))
        }
      </div>

      <div class="recipes-grid">
        {
          recipes.map((recipe) => {
            const totalTime =
              recipe.data.time.prep +
              recipe.data.time.cook +
              recipe.data.time.wait;
            const hours = Math.floor(totalTime / 60);
            const minutes = totalTime % 60;
            const timeDisplay =
              hours > 0
                ? `${hours}h${minutes > 0 ? ` ${minutes}min` : ""}`
                : `${minutes}min`;

            return (
              <article
                class={`recipe-card ${(recipe.data as any).variant ? `variant-${(recipe.data as any).variant}` : ''}`}
                data-categories={recipe.data.categories.join(",")}
              >
                <a href={`/cuisine/${recipe.id}/`}>
                  {recipe.data.heroImage && (
                    <div class="recipe-image">
                      <img src={recipe.data.heroImage} alt={recipe.data.name} />
                    </div>
                  )}
                  <div class="recipe-content">
                    <div class="recipe-header">
                      <h2 class="recipe-title">{recipe.data.name}</h2>
                      <div class="recipe-badges">
                        {(recipe.data as any).variant && (
                          <span
                            class={`badge variant ${(recipe.data as any).variant}`}
                          >
                            {(recipe.data as any).variant === 'simple' ? 'Simple' : 'Avanc√©e'}
                          </span>
                        )}
                        {recipe.data.freezable && (
                          <span
                            class="badge freezable"
                            title="Peut √™tre congel√©"
                          >
                            ‚ùÑÔ∏è
                          </span>
                        )}
                        <span
                          class="badge difficulty"
                          data-level={recipe.data.difficulty}
                        >
                          {recipe.data.difficulty}
                        </span>
                      </div>
                    </div>
                    <p class="recipe-description">{recipe.data.description}</p>
                    <div class="recipe-info">
                      <div class="info-item">
                        <span class="info-icon">‚è±Ô∏è</span>
                        <span class="info-text">{timeDisplay}</span>
                      </div>
                      <div class="info-item">
                        <span class="info-icon">üçΩÔ∏è</span>
                        <span class="info-text">
                          {recipe.data.servings} portions
                        </span>
                      </div>
                      <div class="info-item">
                        <span class="info-icon">üî•</span>
                        <span class="info-text">
                          {recipe.data.cooking_method}
                        </span>
                      </div>
                    </div>
                    <div class="recipe-categories">
                      {recipe.data.categories.map((category) => (
                        <span class="category-badge">{category}</span>
                      ))}
                    </div>
                  </div>
                </a>
              </article>
            );
          })
        }
      </div>
    </main>

    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      :root {
        /* Colors - warm and inviting */
        --bg: #faf8f3;
        --text: #2c2825;
        --text-light: #6b645d;
        --accent: #d35400;
        --accent-light: #ff8c42;
        --gold: #daa520;
        --warm-brown: #8b4513;

        /* Typography scale (1.25x) */
        --text-xs: 0.8rem;
        --text-sm: 0.9rem;
        --text-base: 1rem;
        --text-lg: 1.25rem;
        --text-xl: 1.563rem;
        --text-2xl: 1.953rem;
        --text-3xl: 2.441rem;
        --text-4xl: 3.052rem;
        --text-5xl: 3.815rem;
        --text-6xl: 4.768rem;

        /* Spacing scale */
        --space-xs: 0.5rem;
        --space-sm: 1rem;
        --space-md: 1.5rem;
        --space-lg: 2rem;
        --space-xl: 3rem;
        --space-2xl: 4rem;
        --space-3xl: 6rem;
      }

      body {
        background: var(--bg);
        color: var(--text);
        font-family: "Crimson Pro", Georgia, serif;
        line-height: 1.7;
        font-size: 1.125rem;
        overflow-x: hidden;
        font-weight: 400;
        min-height: 100vh;
      }

      .grain {
        position: fixed;
        top: -50%;
        left: -50%;
        right: -50%;
        bottom: -50%;
        width: 200%;
        height: 200%;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100' height='100'%3E%3Cfilter id='noise'%3E%3CfeTurbulence baseFrequency='0.9' numOctaves='1' seed='2' /%3E%3C/filter%3E%3Crect width='100' height='100' filter='url(%23noise)' opacity='0.02'/%3E%3C/svg%3E");
        pointer-events: none;
        z-index: 1;
        opacity: 0.4;
        mix-blend-mode: multiply;
      }

      header {
        position: relative;
        z-index: 10;
        padding: var(--space-lg);
      }

      .top-nav {
        max-width: 1200px;
        margin: 0 auto;
      }

      .home-link {
        color: var(--text-light);
        text-decoration: none;
        font-size: var(--text-sm);
        letter-spacing: 0.05em;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        padding: var(--space-xs) var(--space-sm);
        background: rgba(250, 248, 243, 0.8);
        backdrop-filter: blur(10px);
        border-radius: 2rem;
        display: inline-block;
        text-transform: uppercase;
        font-weight: 500;
      }

      .home-link:hover {
        color: var(--accent);
        transform: translateX(-3px);
        background: rgba(250, 248, 243, 0.95);
      }

      main {
        position: relative;
        z-index: 10;
        max-width: 1200px;
        margin: 0 auto;
        padding: var(--space-lg);
      }

      .header-section {
        text-align: center;
        margin-bottom: var(--space-3xl);
        animation: fadeInUp 0.8s ease-out;
      }

      @keyframes fadeInUp {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .page-title {
        font-family: "Playfair Display", serif;
        font-weight: 900;
        font-size: clamp(var(--text-4xl), 8vw, var(--text-6xl));
        line-height: 0.95;
        letter-spacing: -0.03em;
        color: var(--text);
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.05);
        margin-bottom: var(--space-lg);
      }

      .accent {
        color: var(--accent);
        font-style: italic;
        background: linear-gradient(135deg, var(--accent), var(--accent-light));
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
      }

      .subtitle {
        font-size: clamp(var(--text-lg), 3vw, var(--text-xl));
        color: var(--text-light);
        font-weight: 400;
        font-style: italic;
        letter-spacing: -0.01em;
      }

      .categories {
        display: flex;
        gap: var(--space-sm);
        margin-bottom: var(--space-3xl);
        flex-wrap: wrap;
        justify-content: center;
        animation: fadeIn 1s ease-out 0.3s both;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }

      .category-filter {
        background: rgba(250, 248, 243, 0.8);
        border: 2px solid rgba(211, 84, 0, 0.15);
        color: var(--text);
        padding: var(--space-xs) var(--space-lg);
        border-radius: 2rem;
        font-size: var(--text-base);
        cursor: pointer;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
        font-family: "Crimson Pro", serif;
        font-weight: 500;
        letter-spacing: 0.02em;
        backdrop-filter: blur(10px);
      }

      .category-filter:hover {
        background: rgba(250, 248, 243, 0.95);
        border-color: rgba(211, 84, 0, 0.3);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(211, 84, 0, 0.15);
      }

      .category-filter.active {
        background: var(--accent);
        border-color: var(--accent);
        color: white;
        font-weight: 600;
        box-shadow: 0 4px 12px rgba(211, 84, 0, 0.3);
      }

      .recipes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
        gap: var(--space-xl);
        margin-top: var(--space-2xl);
      }

      .recipe-card {
        background: rgba(250, 248, 243, 0.9);
        border-radius: 12px;
        overflow: hidden;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        border: 2px solid rgba(211, 84, 0, 0.1);
        backdrop-filter: blur(10px);
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
        animation: slideIn 0.6s ease-out both;
        animation-delay: calc(var(--card-index, 0) * 0.1s);
      }

      @keyframes slideIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .recipe-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 12px 40px rgba(211, 84, 0, 0.15);
        border-color: rgba(211, 84, 0, 0.25);
      }

      /* Simple variant - lighter, cleaner background */
      .recipe-card.variant-simple {
        background: linear-gradient(
          135deg,
          rgba(240, 253, 244, 1) 0%,
          rgba(220, 252, 231, 0.7) 100%
        );
        border: 2px solid rgba(134, 239, 172, 0.2);
        position: relative;
      }

      .recipe-card.variant-simple::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(134, 239, 172, 0.5),
          transparent
        );
        border-radius: 8px 8px 0 0;
      }

      .recipe-card.variant-simple:hover {
        border-color: rgba(134, 239, 172, 0.35);
        box-shadow: 0 12px 40px rgba(134, 239, 172, 0.12);
        transform: translateY(-8px);
      }

      /* Advanced variant - richer, warmer background */
      .recipe-card.variant-avance {
        background: linear-gradient(
          135deg,
          rgba(255, 251, 235, 1) 0%,
          rgba(254, 243, 199, 0.6) 100%
        );
        border: 2px solid rgba(251, 191, 36, 0.2);
        position: relative;
      }

      .recipe-card.variant-avance::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 3px;
        background: linear-gradient(
          90deg,
          transparent,
          rgba(251, 191, 36, 0.5),
          transparent
        );
        border-radius: 8px 8px 0 0;
      }

      .recipe-card.variant-avance:hover {
        border-color: rgba(251, 191, 36, 0.35);
        box-shadow: 0 12px 40px rgba(251, 191, 36, 0.12);
        transform: translateY(-8px);
      }

      .recipe-card[data-hidden="true"] {
        display: none;
      }

      .recipe-card a {
        text-decoration: none;
        color: inherit;
        display: block;
      }

      .recipe-image {
        width: 100%;
        height: 240px;
        overflow: hidden;
        position: relative;
      }

      .recipe-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
        filter: sepia(5%) saturate(105%) contrast(102%);
      }

      .recipe-card:hover .recipe-image img {
        transform: scale(1.05);
      }

      .recipe-image::after {
        content: "";
        position: absolute;
        inset: 0;
        background: linear-gradient(
          180deg,
          transparent 60%,
          rgba(211, 84, 0, 0.05)
        );
        pointer-events: none;
      }

      .recipe-content {
        padding: var(--space-lg);
      }

      .recipe-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: var(--space-md);
      }

      .recipe-title {
        font-family: "Playfair Display", serif;
        font-size: var(--text-xl);
        color: var(--accent);
        font-weight: 700;
        flex: 1;
        line-height: 1.2;
        letter-spacing: -0.01em;
      }

      .recipe-badges {
        display: flex;
        gap: var(--space-xs);
        margin-left: var(--space-md);
      }

      .badge {
        padding: var(--space-xs) var(--space-sm);
        border-radius: 6px;
        font-size: var(--text-xs);
        font-weight: 600;
        letter-spacing: 0.05em;
        text-transform: uppercase;
      }

      .badge.freezable {
        background: rgba(100, 180, 255, 0.15);
        border: 1px solid rgba(100, 180, 255, 0.3);
        color: #2563eb;
      }

      .badge.difficulty {
        background: rgba(211, 84, 0, 0.1);
        border: 1px solid rgba(211, 84, 0, 0.2);
        color: var(--accent);
        text-transform: capitalize;
      }

      .badge.difficulty[data-level="facile"] {
        background: rgba(34, 197, 94, 0.1);
        border-color: rgba(34, 197, 94, 0.3);
        color: #059669;
      }

      .badge.difficulty[data-level="difficile"] {
        background: rgba(239, 68, 68, 0.1);
        border-color: rgba(239, 68, 68, 0.3);
        color: #dc2626;
      }

      .badge.difficulty[data-level="moyen"] {
        background: rgba(251, 146, 60, 0.1);
        border-color: rgba(251, 146, 60, 0.3);
        color: #ea580c;
      }

      .badge.variant {
        background: rgba(139, 92, 246, 0.1);
        border: 1px solid rgba(139, 92, 246, 0.3);
        color: #7c3aed;
      }

      .badge.variant.simple {
        background: rgba(34, 197, 94, 0.1);
        border-color: rgba(34, 197, 94, 0.3);
        color: #059669;
      }

      .badge.variant.avance {
        background: rgba(217, 119, 6, 0.1);
        border-color: rgba(217, 119, 6, 0.3);
        color: #b45309;
      }

      .recipe-description {
        color: var(--text);
        line-height: 1.65;
        margin-bottom: var(--space-lg);
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
        font-size: var(--text-base);
      }

      .recipe-info {
        display: flex;
        gap: var(--space-lg);
        margin-bottom: var(--space-md);
        padding: var(--space-md) 0;
        border-top: 2px solid rgba(211, 84, 0, 0.1);
        border-bottom: 2px solid rgba(211, 84, 0, 0.1);
      }

      .info-item {
        display: flex;
        align-items: center;
        gap: var(--space-xs);
        font-size: var(--text-sm);
      }

      .info-icon {
        font-size: 1.1rem;
        opacity: 0.7;
      }

      .info-text {
        color: var(--text-light);
        font-weight: 500;
        letter-spacing: 0.01em;
      }

      .recipe-categories {
        display: flex;
        gap: var(--space-xs);
        flex-wrap: wrap;
        margin-top: var(--space-md);
      }

      .category-badge {
        background: rgba(211, 84, 0, 0.08);
        color: var(--accent);
        padding: var(--space-xs) var(--space-sm);
        border-radius: 1rem;
        font-size: var(--text-xs);
        border: 1px solid rgba(211, 84, 0, 0.2);
        font-weight: 500;
        letter-spacing: 0.02em;
        text-transform: capitalize;
      }

      @media (max-width: 768px) {
        main {
          padding: var(--space-md);
        }

        .header-section {
          margin-bottom: var(--space-2xl);
        }

        .page-title {
          font-size: clamp(var(--text-3xl), 6vw, var(--text-4xl));
        }

        .subtitle {
          font-size: var(--text-lg);
        }

        .categories {
          margin-bottom: var(--space-2xl);
          gap: var(--space-xs);
        }

        .category-filter {
          padding: var(--space-xs) var(--space-md);
          font-size: var(--text-sm);
        }

        .recipes-grid {
          grid-template-columns: 1fr;
          gap: var(--space-lg);
        }

        .recipe-card {
          border-radius: 8px;
        }

        .recipe-image {
          height: 200px;
        }

        .recipe-content {
          padding: var(--space-md);
        }

        .recipe-header {
          flex-direction: column;
          gap: var(--space-sm);
          align-items: flex-start;
        }

        .recipe-badges {
          margin-left: 0;
        }

        .recipe-info {
          flex-direction: column;
          gap: var(--space-sm);
          padding: var(--space-sm) 0;
        }
      }

      @media (max-width: 480px) {
        .category-filter {
          font-size: var(--text-xs);
          padding: var(--space-xs);
        }

        .recipe-title {
          font-size: var(--text-lg);
        }
      }
    </style>

    <script>
      const filters = document.querySelectorAll(".category-filter");
      const recipes = document.querySelectorAll(".recipe-card");

      filters.forEach((filter) => {
        filter.addEventListener("click", () => {
          filters.forEach((f) => f.classList.remove("active"));
          filter.classList.add("active");

          const category = filter.dataset.category;

          recipes.forEach((recipe) => {
            if (category === "all") {
              recipe.style.display = "block";
            } else {
              const recipeCategories =
                recipe.dataset.categories?.split(",") || [];
              if (recipeCategories.includes(category)) {
                recipe.style.display = "block";
              } else {
                recipe.style.display = "none";
              }
            }
          });
        });
      });
    </script>
  </body>
</html>
