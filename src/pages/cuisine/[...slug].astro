---
import { getCollection } from "astro:content";
import CuisineLayout from "../../layouts/CuisineLayout.astro";
import RecipeDetailNav from "../../components/RecipeDetailNav.astro";
import RecipeStepAnimations from "../../components/RecipeStepAnimations.astro";

export async function getStaticPaths() {
  const recipes = await getCollection("cuisine");
  return recipes.map((recipe) => ({
    params: { slug: recipe.id },
    props: { recipe },
  }));
}

const { recipe } = Astro.props;
const data = recipe.data;

const cookTime = data.time.cook;
const prepTime = data.time.prep;

function formatTime(minutes: number) {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  if (hours > 0 && mins > 0) {
    return `${hours} ${hours > 1 ? "heures" : "heure"} et ${mins} minutes`;
  } else if (hours > 0) {
    return `${hours} ${hours > 1 ? "heures" : "heure"}`;
  } else {
    return `${mins} minutes`;
  }
}
---

<CuisineLayout
  title={`${data.name} | Renardo Cuisine`}
  description={data.description}
>
  <RecipeDetailNav />

  <article class="recipe-article">
    <header class="hero-section">
      {
        data.heroImage && (
          <div class="hero-image-wrapper">
            <img
              src={data.heroImage}
              alt={`Image de ${data.name}`}
              class="hero-image"
              loading="eager"
            />
          </div>
        )
      }

      <div class="hero-content">
        <div class="recipe-categories">
          {data.categories.slice(0, 3).map((cat: string) => (
            <span class="category-tag">{cat}</span>
          ))}
        </div>

        <h1 class="recipe-title">{data.name}</h1>

        <p class="recipe-description">{data.description}</p>
      </div>

      <div class="recipe-metadata">
        <div class="meta-grid">
          <div class="meta-item">
            <div class="meta-label">Difficulté</div>
            <div class="meta-value meta-highlight">{data.difficulty}</div>
          </div>

          <div class="meta-item">
            <div class="meta-label">Portions</div>
            <div class="meta-value meta-number">{data.servings} convives</div>
          </div>

          {
            prepTime > 0 && (
              <div class="meta-item">
                <div class="meta-label">Préparation</div>
                <div class="meta-value meta-number">{formatTime(prepTime)}</div>
              </div>
            )
          }

          <div class="meta-item">
            <div class="meta-label">Cuisson</div>
            <div class="meta-value meta-number">{formatTime(cookTime)}</div>
          </div>

          <div class="meta-item">
            <div class="meta-label">Méthode</div>
            <div class="meta-value meta-method">{data.cooking_method}</div>
          </div>

          {
            data.freezable && (
              <div class="meta-item">
                <div class="meta-label">Conservation</div>
                <div class="meta-value">Se congèle</div>
              </div>
            )
          }
        </div>
      </div>

      {
        data.note && (
          <div class="recipe-note">
            {data.note}
          </div>
        )
      }

      <div class="meal-plan-actions">
        <button
          class="add-to-meal-plan-btn"
          id="addToMealPlan"
          data-recipe-id={recipe.id}
          aria-label="Ajouter au plan repas"
        >
          <span class="btn-icon" id="btnIcon">+</span>
          <span class="btn-text" id="btnText">Ajouter au plan repas</span>
        </button>
      </div>
    </header>

    <section class="content-flow">
      <div class="ingredients-prose">
        <h2 class="section-heading">Les provisions</h2>
        <p class="ingredient-intro">{data.ingredientIntro}</p>

        <div class="ingredients-layout">
          <div class="ingredients-grid">
            {
              data.ingredients.map((ingredient, index) => {
                // Check if it's a subsection
                if ('subsection' in ingredient) {
                  return (
                    <div class="ingredient-subsection">
                      {ingredient.subsection}
                    </div>
                  );
                }

                // Regular structured ingredient
                const { quantity, unit, ingredient: name, note } = ingredient;

                // Build the main part
                let main = '';
                if (quantity && unit) {
                  main = `${quantity} ${unit} de ${name}`;
                } else if (quantity) {
                  main = `${quantity} ${name}`;
                } else {
                  main = name;
                }

                return (
                  <div class="ingredient-line">
                    <span class="ingredient-bullet">—</span>
                    <div class="ingredient-content">
                      <span class="ingredient-main">{main}</span>
                      {note && <span class="ingredient-note">{note}</span>}
                    </div>
                    <button
                      class="add-to-shopping-btn"
                      data-recipe-id={recipe.id}
                      data-recipe-name={data.name}
                      data-ingredient-index={index}
                      data-quantity={quantity}
                      data-unit={unit}
                      data-ingredient={name}
                      data-note={note}
                      aria-label="Ajouter à la liste d'épicerie"
                    >
                      <span class="btn-icon-plus"></span>
                    </button>
                  </div>
                );
              })
            }
          </div>
        </div>
      </div>

      <div class="preparation-narrative">
        <h2 class="section-heading">La méthode</h2>

        {
          data.steps.map((step, index) => {
            // Detect subsection headers (end with ':')
            const isSubsection = step.endsWith(':') && step.length < 100;

            if (isSubsection) {
              return (
                <div class="step-subsection">
                  {step}
                </div>
              );
            }

            // Regular step - calculate actual step number (excluding subsections)
            const stepNumber = data.steps.slice(0, index).filter(s =>
              !(s.endsWith(':') && s.length < 100)
            ).length + 1;

            return (
              <div class="step-prose">
                <span class="step-number-inline">{stepNumber}</span>
                <p class="step-text">{step}</p>
              </div>
            );
          })
        }
      </div>

      {
        data.tips && (
          <div class="tips-card">
            <h2 class="tips-heading">
              <img src="/renard.png" alt="Renard" class="tips-icon" />
              Les conseils de Renard
            </h2>
            <p class="tips-text">{data.tips}</p>
          </div>
        )
      }

      <div class="recipe-categories-prose">
        <p class="category-line">
          Une recette <em>{data.categories.join(", ")}</em> qui réchauffe le cœur.
        </p>
      </div>
    </section>
  </article>

  <footer class="minimal-footer">
    <a href="/cuisine" class="return-link">Découvrir d'autres recettes</a>
  </footer>

  <RecipeStepAnimations />

  <style>
    .recipe-article {
      max-width: 800px;
      margin: 0 auto;
      padding: var(--space-3xl) var(--space-xl) var(--space-2xl);
      position: relative;
      z-index: 10;
    }

    /* Hero Section */
    .hero-section {
      margin-bottom: 3rem;
    }

    .hero-image-wrapper {
      width: 100%;
      aspect-ratio: 16 / 9;
      overflow: hidden;
      background: #f5f5f5;
      margin-bottom: 2.5rem;
      border: 1px solid rgba(211, 84, 0, 0.12);
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .hero-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      display: block;
    }

    .hero-content {
      max-width: 900px;
      margin: 0 auto 2.5rem;
      text-align: center;
    }

    .recipe-categories {
      display: flex;
      gap: 0.5rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 1.25rem;
    }

    .category-tag {
      font-size: 0.7rem;
      text-transform: uppercase;
      letter-spacing: 0.12em;
      color: #8b5a2b;
      font-weight: 600;
      padding: 4px 10px;
      background: rgba(211, 84, 0, 0.06);
      border-radius: 2px;
      border: 1px solid rgba(211, 84, 0, 0.15);
    }

    .recipe-title {
      font-family: "Playfair Display", serif;
      font-weight: 700;
      font-size: clamp(2.5rem, 6vw, 3.75rem);
      line-height: 1.15;
      letter-spacing: -0.02em;
      color: #2c2c2c;
      margin: 0 0 1rem;
    }

    .recipe-description {
      font-size: clamp(1rem, 2.5vw, 1.2rem);
      line-height: 1.7;
      color: #555;
      margin: 0;
      max-width: 700px;
      margin: 0 auto;
    }

    /* Metadata Section */
    .recipe-metadata {
      margin: 2.5rem 0;
      padding: 2rem 0;
      border-top: 1px solid rgba(211, 84, 0, 0.12);
      border-bottom: 1px solid rgba(211, 84, 0, 0.12);
    }

    .meta-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem 2rem;
      max-width: 900px;
      margin: 0 auto;
      justify-content: center;
    }

    .meta-item {
      text-align: center;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      min-width: 120px;
    }

    .meta-label {
      font-size: 0.7rem;
      text-transform: uppercase;
      letter-spacing: 0.12em;
      color: #999;
      font-weight: 700;
    }

    .meta-value {
      font-size: 1rem;
      color: #2c2c2c;
      font-weight: 500;
      line-height: 1.3;
    }

    .meta-highlight {
      font-style: italic;
      color: #d35400;
      font-weight: 600;
      text-transform: capitalize;
    }

    .meta-number {
      font-family: "Playfair Display", serif;
      font-weight: 700;
      font-size: 1.2rem;
      color: #8b5a2b;
    }

    .meta-method {
      font-style: italic;
      color: #555;
      font-weight: 500;
    }

    .recipe-note {
      background: rgba(211, 84, 0, 0.04);
      border-left: 3px solid #d35400;
      padding: 1rem 1.5rem;
      font-size: 0.95rem;
      color: #555;
      margin: 1.5rem auto;
      max-width: 900px;
      font-style: italic;
      text-align: center;
    }

    /* Meal Plan Actions */
    .meal-plan-actions {
      margin: 2rem auto 0;
      text-align: center;
    }

    .add-to-meal-plan-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.875rem 1.75rem;
      background: #fff;
      border: 2px solid #d35400;
      color: #d35400;
      font-family: "Crimson Pro", serif;
      font-size: 1rem;
      font-weight: 600;
      letter-spacing: 0.02em;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .add-to-meal-plan-btn:hover {
      background: #d35400;
      color: white;
      transform: translateY(-2px);
      box-shadow:
        0 4px 8px rgba(211, 84, 0, 0.2),
        0 8px 16px rgba(211, 84, 0, 0.15);
    }

    .add-to-meal-plan-btn.in-plan {
      background: #d35400;
      color: white;
      border-color: #d35400;
    }

    .add-to-meal-plan-btn.in-plan:hover {
      background: #b84400;
      border-color: #b84400;
    }

    .btn-icon {
      font-size: 1.25rem;
      line-height: 1;
      font-weight: 700;
    }

    .btn-text {
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-size: 0.85rem;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    /* Section Headings */
    .section-heading {
      font-family: "Playfair Display", serif;
      font-size: 2rem;
      font-weight: 700;
      color: #2c2c2c;
      margin: 3rem 0 2rem;
      text-align: center;
      letter-spacing: -0.01em;
    }

    .ingredient-intro {
      font-size: 1.05rem;
      color: #777;
      margin-bottom: 2rem;
      text-align: center;
      font-style: italic;
      line-height: 1.7;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
    }

    .ingredients-layout {
      background: #fff;
      border: 1px solid rgba(211, 84, 0, 0.12);
      padding: 2rem 1.75rem;
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .ingredients-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      column-gap: var(--space-2xl);
      row-gap: var(--space-md);
    }

    .ingredient-line {
      display: grid;
      grid-template-columns: auto 1fr auto;
      gap: 0.75rem;
      align-items: start;
      font-size: 1rem;
      color: #2c2c2c;
      padding: 0.5rem 0;
      position: relative;
    }

    .ingredient-bullet {
      color: #d35400;
      opacity: 0.5;
      font-weight: 600;
      font-size: 1.1em;
      line-height: 1.5;
    }

    .ingredient-content {
      line-height: 1.6;
    }

    .ingredient-main {
      color: #2c2c2c;
      font-weight: 500;
    }

    .ingredient-note {
      font-size: 0.9rem;
      color: #777;
      font-style: italic;
      display: block;
      margin-top: 0.2rem;
      line-height: 1.5;
    }

    .ingredient-subsection {
      grid-column: 1 / -1;
      font-family: "Playfair Display", serif;
      font-size: 1.1rem;
      font-weight: 700;
      color: #2c2c2c;
      margin-top: 1.5rem;
      margin-bottom: 0.75rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid rgba(211, 84, 0, 0.15);
    }

    .ingredient-subsection:first-child {
      margin-top: 0;
    }

    /* Add to Shopping Button */
    .add-to-shopping-btn {
      background: rgba(250, 248, 243, 0.5);
      border: 1px solid rgba(211, 84, 0, 0.2);
      color: #d35400;
      cursor: pointer;
      padding: 0.35rem 0.5rem;
      font-size: 0.75rem;
      border-radius: 2px;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      line-height: 1;
      font-weight: 700;
      opacity: 0;
      transform: translateX(-5px);
      margin-top: 0.25rem;
      min-width: 2rem;
      min-height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .ingredient-line:hover .add-to-shopping-btn {
      opacity: 1;
      transform: translateX(0);
    }

    .add-to-shopping-btn:hover {
      background: #d35400;
      color: white;
      border-color: #d35400;
      transform: scale(1.08);
    }

    .add-to-shopping-btn.in-list {
      opacity: 1;
      background: #d35400;
      color: white;
      border-color: #d35400;
    }

    .btn-icon-plus {
      display: inline-block;
    }

    .btn-icon-plus::after {
      content: "+";
    }

    .add-to-shopping-btn.in-list .btn-icon-plus::after {
      content: "✓";
    }

    /* Mobile: always show buttons, larger touch targets */
    @media (max-width: 768px) {
      .add-to-shopping-btn {
        opacity: 1;
        transform: translateX(0);
        padding: 0.5rem;
        min-width: 2.5rem;
        min-height: 2.5rem;
        font-size: 0.85rem;
        background: rgba(250, 248, 243, 0.9);
      }

      .add-to-shopping-btn:active {
        background: #d35400;
        color: white;
        transform: scale(0.95);
      }
    }

    .preparation-narrative {
      margin: var(--space-3xl) 0;
    }

    /* Steps Section */
    .step-subsection {
      font-family: "Playfair Display", serif;
      font-size: 1.1rem;
      font-weight: 700;
      color: #2c2c2c;
      margin-top: 2rem;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid rgba(211, 84, 0, 0.15);
    }

    .step-subsection:first-child {
      margin-top: 0;
    }

    .step-prose {
      margin-bottom: 2rem;
      display: grid;
      grid-template-columns: 3rem 1fr;
      gap: 1.5rem;
      align-items: start;
      padding: 1.5rem 0;
      border-bottom: 1px solid rgba(211, 84, 0, 0.08);
    }

    .step-number-inline {
      font-family: "Playfair Display", serif;
      font-size: 2rem;
      font-weight: 700;
      color: #d35400;
      line-height: 1;
      text-align: center;
    }

    .step-number-inline::after {
      content: ".";
    }

    .step-text {
      font-size: 1.05rem;
      line-height: 1.75;
      color: #555;
      margin: 0;
    }

    /* Tips Card - Magazine Style */
    .tips-card {
      margin: 3rem 0;
      padding: 2rem;
      background: #fff;
      border: 2px solid rgba(211, 84, 0, 0.2);
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .tips-heading {
      font-family: "Playfair Display", serif;
      font-size: 1.5rem;
      font-weight: 700;
      color: #d35400;
      margin: 0 0 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .tips-icon {
      width: 2.5rem;
      height: 2.5rem;
      display: inline-block;
      border-radius: 50%;
      border: 1px solid rgba(211, 84, 0, 0.2);
    }

    .tips-text {
      font-size: 1.05rem;
      line-height: 1.75;
      color: #555;
      margin: 0;
    }

    /* Footer Sections */
    .recipe-categories-prose {
      margin: 3rem 0 2rem;
      padding-top: 2.5rem;
      border-top: 1px solid rgba(211, 84, 0, 0.12);
      text-align: center;
    }

    .category-line {
      font-size: 1rem;
      color: #777;
      font-style: italic;
    }

    .category-line em {
      color: #d35400;
      font-weight: 600;
      font-style: normal;
    }

    .minimal-footer {
      text-align: center;
      padding: 2rem 1rem;
      margin-top: 3rem;
      border-top: 1px solid rgba(211, 84, 0, 0.08);
    }

    .return-link {
      font-size: 0.9rem;
      color: #d35400;
      text-decoration: none;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-weight: 600;
      transition: color 0.3s ease;
    }

    .return-link:hover {
      color: #ff6b00;
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .recipe-article {
        padding: 2rem 1.25rem;
      }

      .hero-image-wrapper {
        aspect-ratio: 4 / 3;
      }

      .recipe-title {
        font-size: clamp(2rem, 8vw, 2.75rem);
      }

      .recipe-description {
        font-size: 1rem;
      }

      .section-heading {
        font-size: 1.75rem;
        margin: 2.5rem 0 1.5rem;
      }

      .ingredients-layout {
        padding: 1.5rem 1.25rem;
      }

      .ingredients-grid {
        grid-template-columns: 1fr;
        gap: var(--space-sm);
      }

      .step-prose {
        grid-template-columns: 2.5rem 1fr;
        gap: 1rem;
        padding: 1.25rem 0;
      }

      .step-number-inline {
        font-size: 1.75rem;
      }

      .step-text {
        font-size: 1rem;
      }

      .tips-card {
        padding: 1.5rem;
      }

      .tips-heading {
        font-size: 1.35rem;
      }
    }

    @media (max-width: 480px) {
      .recipe-article {
        padding: var(--space-xl) var(--space-sm);
      }

      .hero-image-wrapper {
        height: 280px;
      }

      .hero-overlay {
        padding: var(--space-lg) var(--space-md);
      }

      .recipe-name {
        font-size: 1.75rem;
      }

      .meta-line {
        font-size: 1rem;
        line-height: 1.8;
      }

      .step-prose {
        grid-template-columns: 1fr;
        gap: 0.75rem;
        padding: 1rem 0;
      }

      .step-number-inline {
        font-size: 1.5rem;
        text-align: left;
        margin-bottom: 0.5rem;
      }

      .ingredients-layout {
        padding: 1.25rem 1rem;
      }

      .tips-card {
        padding: 1.25rem;
      }

      .tips-heading {
        font-size: 1.25rem;
      }
    }

    /* Subtle print styles */
    @media print {
      .grain {
        display: none;
      }
    }
  </style>

  <script>
    import {
      addRecipe,
      removeRecipe,
      isInMealPlan,
    } from "../../lib/meal-plan-manager.js";
    import {
      addIngredient,
      removeIngredient,
      isInShoppingList,
      getShoppingList,
    } from "../../lib/shopping-list-manager.js";

    // Meal Plan functionality
    const addButton = document.getElementById("addToMealPlan") as HTMLButtonElement | null;
    const btnIcon = document.getElementById("btnIcon");
    const btnText = document.getElementById("btnText");

    if (addButton && btnIcon && btnText) {
      const recipeId = addButton.dataset.recipeId;

      if (!recipeId) {
        console.error("Recipe ID not found");
      } else {
        // Update button state
        function updateButtonState() {
          if (!addButton || !btnIcon || !btnText || !recipeId) return;

          const inPlan = isInMealPlan(recipeId);

          if (inPlan) {
            addButton.classList.add("in-plan");
            btnIcon.textContent = "✓";
            btnText.textContent = "Dans le plan";
          } else {
            addButton.classList.remove("in-plan");
            btnIcon.textContent = "+";
            btnText.textContent = "Ajouter au plan repas";
          }
        }

        // Handle button click
        addButton.addEventListener("click", () => {
          if (!recipeId) return;

          const inPlan = isInMealPlan(recipeId);

          if (inPlan) {
            removeRecipe(recipeId);
          } else {
            addRecipe(recipeId);
          }

          updateButtonState();
        });

        // Listen for updates from other components
        window.addEventListener("mealPlanUpdated", () => {
          updateButtonState();
        });

        // Initial state
        updateButtonState();
      }
    }

    // Shopping List functionality
    const shoppingButtons = document.querySelectorAll(".add-to-shopping-btn");

    function updateShoppingButtonStates() {
      shoppingButtons.forEach((btn) => {
        const button = btn as HTMLButtonElement;
        const recipeId = button.dataset.recipeId;
        const ingredientIndex = parseInt(button.dataset.ingredientIndex || "0");

        if (recipeId && !isNaN(ingredientIndex)) {
          if (isInShoppingList(recipeId, ingredientIndex)) {
            button.classList.add("in-list");
            button.setAttribute("aria-label", "Retirer de la liste d'épicerie");
          } else {
            button.classList.remove("in-list");
            button.setAttribute("aria-label", "Ajouter à la liste d'épicerie");
          }
        }
      });
    }

    shoppingButtons.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const button = btn as HTMLButtonElement;
        const recipeId = button.dataset.recipeId;
        const recipeName = button.dataset.recipeName;
        const ingredientIndex = parseInt(button.dataset.ingredientIndex || "0");

        if (!recipeId || !recipeName || isNaN(ingredientIndex)) {
          console.error("Missing ingredient data");
          return;
        }

        const ingredientData = {
          quantity: button.dataset.quantity || null,
          unit: button.dataset.unit || null,
          ingredient: button.dataset.ingredient || "",
          note: button.dataset.note || null,
        };

        // Check if already in list
        if (isInShoppingList(recipeId, ingredientIndex)) {
          // Find and remove the ingredient
          const shoppingList = getShoppingList();
          const item = shoppingList.find(
            (item) => item.recipeId === recipeId && item.ingredientIndex === ingredientIndex
          );
          if (item) {
            removeIngredient(item.id);
          }
        } else {
          // Add to list
          addIngredient(recipeId, recipeName, ingredientIndex, ingredientData);
        }

        updateShoppingButtonStates();
      });
    });

    // Listen for updates from other components
    window.addEventListener("shoppingListUpdated", () => {
      updateShoppingButtonStates();
    });

    // Initial state
    updateShoppingButtonStates();
  </script>
</CuisineLayout>
