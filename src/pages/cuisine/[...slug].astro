---
import { getCollection } from "astro:content";
import CuisineLayout from "../../layouts/CuisineLayout.astro";
import CuisineNav from "../../components/CuisineNav.astro";
import RecipeStepAnimations from "../../components/RecipeStepAnimations.astro";
import KindergartenSteps from "../../components/KindergartenSteps.astro";

export async function getStaticPaths() {
  const recipes = await getCollection("cuisine");
  return recipes.map((recipe) => ({
    params: { slug: recipe.id },
    props: { recipe },
  }));
}

const { recipe } = Astro.props;
const data = recipe.data;

const cookTime = data.time.cook;
const prepTime = data.time.prep;

// Check if this is a Camps Scout recipe for theme
const isScoutRecipe = data.mainCategory === "Camps Scout";

function formatTime(minutes: number) {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  if (hours > 0 && mins > 0) {
    return `${hours} ${hours > 1 ? "heures" : "heure"} et ${mins} minutes`;
  } else if (hours > 0) {
    return `${hours} ${hours > 1 ? "heures" : "heure"}`;
  } else {
    return `${mins} minutes`;
  }
}
---

<CuisineLayout
  title={`${data.name} | Renardo Cuisine`}
  description={data.description}
>
  <CuisineNav variant="detail" activeMainCategory={data.mainCategory} />

  <article class={`recipe-article ${isScoutRecipe ? 'scout-theme' : ''}`}>
    <header class="hero-section">
      {
        data.heroImage && (
          <div class="hero-image-wrapper">
            <img
              src={data.heroImage}
              alt={`Image de ${data.name}`}
              class="hero-image"
              loading="eager"
            />
          </div>
        )
      }

      <div class="hero-content">
        <div class="recipe-categories">
          {data.categories.slice(0, 3).map((cat: string) => (
            <span class="category-tag">{cat}</span>
          ))}
        </div>

        {
          data.scoutContext && data.scoutContext.length > 0 && (
            <div class="scout-context-tags">
              {data.scoutContext.map((context: string) => (
                <span class="scout-context-tag">{context}</span>
              ))}
            </div>
          )
        }

        <h1 class="recipe-title">{data.name}</h1>

        <p class="recipe-description">{data.description}</p>
      </div>

      <div class="recipe-metadata">
        <div class="meta-grid">
          <div class="meta-item">
            <div class="meta-label">Difficulté</div>
            <div class="meta-value meta-highlight">{data.difficulty}</div>
          </div>

          <div class="meta-item">
            <div class="meta-label">Portions</div>
            <div class="meta-value meta-number">{data.servings.quantity} {data.servings.unit}</div>
          </div>

          {
            data.scoutCount && (
              <div class="meta-item scout-count-meta">
                <div class="meta-label">Scouts</div>
                <div class="meta-value meta-number">{data.scoutCount} scouts</div>
              </div>
            )
          }

          {
            prepTime > 0 && (
              <div class="meta-item">
                <div class="meta-label">Préparation</div>
                <div class="meta-value meta-number">{formatTime(prepTime)}</div>
              </div>
            )
          }

          <div class="meta-item">
            <div class="meta-label">Cuisson</div>
            <div class="meta-value meta-number">{formatTime(cookTime)}</div>
          </div>

          <div class="meta-item">
            <div class="meta-label">Méthode</div>
            <div class="meta-value meta-method">{data.cooking_method}</div>
          </div>

          {
            data.freezable && (
              <div class="meta-item">
                <div class="meta-label">Conservation</div>
                <div class="meta-value">Se congèle</div>
              </div>
            )
          }
        </div>
      </div>

      {
        data.note && (
          <div class="recipe-note">
            {(() => {
              // Split on all-caps words/phrases followed by colon and space
              const parts = data.note.split(/\s(?=[A-ZÀÂÄÉÈÊËÏÎÔÙÛÜŸÇ]{3,}[A-ZÀÂÄÉÈÊËÏÎÔÙÛÜŸÇ\s'-]*:\s)/);

              return parts.map((section: string, index: number) => {
                const trimmed = section.trim();
                if (!trimmed) return null;

                // Check if starts with all-caps heading
                const headingMatch = trimmed.match(/^([A-ZÀÂÄÉÈÊËÏÎÔÙÛÜŸÇ][A-ZÀÂÄÉÈÊËÏÎÔÙÛÜŸÇ\s'-]*?):\s(.+)$/s);

                if (headingMatch) {
                  return (
                    <div class="note-section" key={index}>
                      <strong class="note-heading">{headingMatch[1]}:</strong>
                      <span> {headingMatch[2]}</span>
                    </div>
                  );
                }

                return <p class="note-paragraph" key={index}>{trimmed}</p>;
              });
            })()}
          </div>
        )
      }

      <div class="meal-plan-actions">
        <button
          class="add-to-meal-plan-btn"
          id="addToMealPlan"
          data-recipe-id={recipe.id}
          aria-label="Ajouter au plan repas"
        >
          <span class="btn-icon" id="btnIcon">+</span>
          <span class="btn-text" id="btnText">Ajouter au plan repas</span>
        </button>
      </div>
    </header>

    <!-- Portion Selector Sticky Header -->
    <div class="portion-selector-sticky" id="portionSelector" data-original-servings={data.servings.quantity}>
      <span class="selector-label">Ajuster pour:</span>
      <div class="portion-controls">
        <button class="portion-btn" id="decreaseBtn" aria-label="Diminuer portions">−</button>
        <input
          type="number"
          id="portionInput"
          class="portion-input"
          value={data.servings.quantity}
          min="1"
          max="1000"
          aria-label="Nombre de portions"
        />
        <button class="portion-btn" id="increaseBtn" aria-label="Augmenter portions">+</button>
      </div>
      <span class="selector-unit">{data.servings.unit}</span>
      <button class="reset-btn" id="resetBtn" aria-label="Réinitialiser portions">↺</button>
    </div>

    <section class="content-flow">
      <div class="ingredients-prose">
        <h2 class="section-heading">Les provisions</h2>
        <p class="ingredient-intro">{data.ingredientIntro}</p>

        <div class="ingredients-layout">
          <div class="ingredients-grid">
            {
              data.ingredients.map((ingredient, index) => {
                // Check if it's a subsection
                if ('subsection' in ingredient) {
                  return (
                    <div class="ingredient-subsection">
                      {ingredient.subsection}
                    </div>
                  );
                }

                // Regular structured ingredient
                const { quantity, unit, ingredient: name, note } = ingredient;

                // Build the main part
                let main = '';
                if (quantity && unit) {
                  main = `${quantity} ${unit} de ${name}`;
                } else if (quantity) {
                  main = `${quantity} ${name}`;
                } else {
                  main = name;
                }

                return (
                  <div class="ingredient-line" data-has-quantity={!!quantity}>
                    <span class="ingredient-bullet">—</span>
                    <div class="ingredient-content">
                      <span
                        class="ingredient-main"
                        data-original-quantity={quantity}
                        data-original-unit={unit}
                        data-ingredient-name={name}
                      >{main}</span>
                      {note && <span class="ingredient-note">{note}</span>}
                    </div>
                    <button
                      class="add-to-shopping-btn"
                      data-recipe-id={recipe.id}
                      data-recipe-name={data.name}
                      data-ingredient-index={index}
                      data-quantity={quantity}
                      data-unit={unit}
                      data-ingredient={name}
                      data-note={note}
                      aria-label="Ajouter à la liste d'épicerie"
                    >
                      <span class="btn-icon-plus"></span>
                    </button>
                  </div>
                );
              })
            }
          </div>
        </div>
      </div>

      <div class="preparation-narrative">
        <h2 class="section-heading">La méthode</h2>

        {data.variant === 'maternelle' && data.visualSteps ? (
          <KindergartenSteps steps={data.visualSteps} />
        ) : (
          <>
            {
              data.steps.map((step, index) => {
                // Detect subsection headers (end with ':')
                const isSubsection = step.endsWith(':') && step.length < 100;

                if (isSubsection) {
                  return (
                    <div class="step-subsection">
                      {step}
                    </div>
                  );
                }

                // Regular step - calculate actual step number (excluding subsections)
                const stepNumber = data.steps.slice(0, index).filter(s =>
                  !(s.endsWith(':') && s.length < 100)
                ).length + 1;

                return (
                  <div class="step-prose">
                    <span class="step-number-inline">{stepNumber}</span>
                    <p class="step-text">{step}</p>
                  </div>
                );
              })
            }
          </>
        )}
      </div>

      {
        data.tips && (
          <div class="tips-card">
            <h2 class="tips-heading">
              <img src="/renard.png" alt="Renard" class="tips-icon" />
              Les conseils de Renard
            </h2>
            <p class="tips-text">{data.tips}</p>
          </div>
        )
      }

      <div class="recipe-categories-prose">
        <p class="category-line">
          Une recette <em>{data.categories.join(", ")}</em> qui réchauffe le cœur.
        </p>
      </div>
    </section>
  </article>

  <footer class="minimal-footer">
    <a href="/cuisine" class="return-link">Découvrir d'autres recettes</a>
  </footer>

  <RecipeStepAnimations />

  <style>
    .recipe-article {
      max-width: 800px;
      margin: 0 auto;
      padding: 6rem var(--space-xl) var(--space-2xl);
      position: relative;
      z-index: 10;
    }

    /* Hero Section */
    .hero-section {
      margin-bottom: 3rem;
    }

    .hero-image-wrapper {
      width: 100%;
      aspect-ratio: 16 / 9;
      overflow: hidden;
      background: #f5f5f5;
      margin-bottom: 2.5rem;
      border: 1px solid rgba(211, 84, 0, 0.12);
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .hero-image {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: center;
      display: block;
    }

    .hero-content {
      max-width: 900px;
      margin: 0 auto 2.5rem;
      text-align: center;
    }

    .recipe-categories {
      display: flex;
      gap: 0.5rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 1.25rem;
    }

    .category-tag {
      font-size: 0.7rem;
      text-transform: uppercase;
      letter-spacing: 0.12em;
      color: #8b5a2b;
      font-weight: 600;
      padding: 4px 10px;
      background: rgba(211, 84, 0, 0.06);
      border-radius: 2px;
      border: 1px solid rgba(211, 84, 0, 0.15);
    }

    .recipe-title {
      font-family: "Playfair Display", serif;
      font-weight: 700;
      font-size: clamp(2.5rem, 6vw, 3.75rem);
      line-height: 1.15;
      letter-spacing: -0.02em;
      color: #2c2c2c;
      margin: 0 0 1rem;
    }

    .recipe-description {
      font-size: clamp(1rem, 2.5vw, 1.2rem);
      line-height: 1.7;
      color: #555;
      margin: 0;
      max-width: 700px;
      margin: 0 auto;
    }

    /* Metadata Section */
    .recipe-metadata {
      margin: 2.5rem 0;
      padding: 2rem 0;
      border-top: 1px solid rgba(211, 84, 0, 0.12);
      border-bottom: 1px solid rgba(211, 84, 0, 0.12);
    }

    .meta-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem 2rem;
      max-width: 900px;
      margin: 0 auto;
      justify-content: center;
    }

    .meta-item {
      text-align: center;
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      min-width: 120px;
    }

    .meta-label {
      font-size: 0.7rem;
      text-transform: uppercase;
      letter-spacing: 0.12em;
      color: #999;
      font-weight: 700;
    }

    .meta-value {
      font-size: 1rem;
      color: #2c2c2c;
      font-weight: 500;
      line-height: 1.3;
    }

    .meta-highlight {
      font-style: italic;
      color: #d35400;
      font-weight: 600;
      text-transform: capitalize;
    }

    .meta-number {
      font-family: "Playfair Display", serif;
      font-weight: 700;
      font-size: 1.2rem;
      color: #8b5a2b;
    }

    .meta-method {
      font-style: italic;
      color: #555;
      font-weight: 500;
    }

    .recipe-note {
      background: rgba(211, 84, 0, 0.02);
      border: 1px solid rgba(211, 84, 0, 0.15);
      border-radius: 8px;
      padding: 1.5rem 2rem;
      font-size: 0.95rem;
      color: #444;
      line-height: 1.7;
      margin: 1.5rem auto;
      max-width: 900px;
      font-style: normal;
      text-align: left;
    }

    .note-section {
      margin-bottom: 1rem;
    }

    .note-section:last-child {
      margin-bottom: 0;
    }

    .note-heading {
      color: #d35400;
      font-weight: 700;
      font-size: 0.9rem;
      letter-spacing: 0.03em;
    }

    .note-paragraph {
      margin-bottom: 0.75rem;
    }

    .note-paragraph:last-child {
      margin-bottom: 0;
    }

    /* Meal Plan Actions */
    .meal-plan-actions {
      margin: 2rem auto 0;
      text-align: center;
    }

    .add-to-meal-plan-btn {
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.875rem 1.75rem;
      background: #fff;
      border: 2px solid #d35400;
      color: #d35400;
      font-family: "Crimson Pro", serif;
      font-size: 1rem;
      font-weight: 600;
      letter-spacing: 0.02em;
      cursor: pointer;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .add-to-meal-plan-btn:hover {
      background: #d35400;
      color: white;
      transform: translateY(-2px);
      box-shadow:
        0 4px 8px rgba(211, 84, 0, 0.2),
        0 8px 16px rgba(211, 84, 0, 0.15);
    }

    .add-to-meal-plan-btn.in-plan {
      background: #d35400;
      color: white;
      border-color: #d35400;
    }

    .add-to-meal-plan-btn.in-plan:hover {
      background: #b84400;
      border-color: #b84400;
    }

    .btn-icon {
      font-size: 1.25rem;
      line-height: 1;
      font-weight: 700;
    }

    .btn-text {
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-size: 0.85rem;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    /* Portion Selector Sticky Header */
    .portion-selector-sticky {
      position: sticky;
      top: 60px;
      z-index: 100;
      background: rgba(10, 10, 10, 0.97);
      backdrop-filter: blur(12px);
      border-bottom: 1px solid rgba(211, 84, 0, 0.2);
      padding: 1rem 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 1rem;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
      transition: transform 0.15s ease, box-shadow 0.3s ease;
    }

    .ingredient-main {
      transition: color 0.15s ease;
    }

    .selector-label {
      color: rgba(255, 255, 255, 0.7);
      font-size: 0.9rem;
      font-weight: 500;
      letter-spacing: 0.02em;
    }

    .portion-controls {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(211, 84, 0, 0.3);
      border-radius: 6px;
      padding: 0.25rem;
    }

    .portion-btn {
      width: 36px;
      height: 36px;
      background: rgba(211, 84, 0, 0.1);
      border: 1px solid rgba(211, 84, 0, 0.3);
      border-radius: 4px;
      color: #ff6b00;
      font-size: 1.4rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      line-height: 1;
    }

    .portion-btn:hover {
      background: rgba(211, 84, 0, 0.2);
      border-color: rgba(211, 84, 0, 0.5);
      transform: scale(1.05);
    }

    .portion-btn:active {
      transform: scale(0.95);
    }

    .portion-input {
      width: 70px;
      height: 36px;
      background: rgba(255, 255, 255, 0.08);
      border: 1px solid rgba(211, 84, 0, 0.2);
      border-radius: 4px;
      color: #fff;
      font-size: 1.1rem;
      font-weight: 600;
      text-align: center;
      padding: 0 0.5rem;
      transition: all 0.2s ease;
    }

    .portion-input:focus {
      outline: none;
      border-color: #ff6b00;
      background: rgba(255, 255, 255, 0.12);
      box-shadow: 0 0 0 3px rgba(255, 107, 0, 0.1);
    }

    /* Remove spinner buttons from number input */
    .portion-input::-webkit-inner-spin-button,
    .portion-input::-webkit-outer-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    .portion-input[type="number"] {
      -moz-appearance: textfield;
    }

    .selector-unit {
      color: rgba(255, 255, 255, 0.6);
      font-size: 0.9rem;
      font-style: italic;
    }

    .reset-btn {
      width: 36px;
      height: 36px;
      background: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      color: rgba(255, 255, 255, 0.7);
      font-size: 1.4rem;
      cursor: pointer;
      transition: all 0.2s ease;
      display: flex;
      align-items: center;
      justify-content: center;
      line-height: 1;
      margin-left: 0.5rem;
    }

    .reset-btn:hover {
      background: rgba(255, 255, 255, 0.1);
      border-color: rgba(255, 255, 255, 0.4);
      color: #fff;
      transform: rotate(180deg);
    }

    /* Mobile responsive */
    @media (max-width: 768px) {
      .portion-selector-sticky {
        padding: 0.75rem 1rem;
        gap: 0.75rem;
        flex-wrap: wrap;
        top: 50px;
      }

      .selector-label {
        font-size: 0.85rem;
      }

      .portion-btn {
        width: 32px;
        height: 32px;
        font-size: 1.2rem;
      }

      .portion-input {
        width: 60px;
        height: 32px;
        font-size: 1rem;
      }

      .reset-btn {
        width: 32px;
        height: 32px;
        font-size: 1.2rem;
      }
    }

    /* Section Headings */
    .section-heading {
      font-family: "Playfair Display", serif;
      font-size: 2rem;
      font-weight: 700;
      color: #2c2c2c;
      margin: 3rem 0 2rem;
      text-align: center;
      letter-spacing: -0.01em;
    }

    .ingredient-intro {
      font-size: 1.05rem;
      color: #777;
      margin-bottom: 2rem;
      text-align: center;
      font-style: italic;
      line-height: 1.7;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
    }

    .ingredients-layout {
      background: #fff;
      border: 1px solid rgba(211, 84, 0, 0.12);
      padding: 2rem 1.75rem;
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .ingredients-grid {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      column-gap: var(--space-2xl);
      row-gap: var(--space-md);
    }

    .ingredient-line {
      display: grid;
      grid-template-columns: auto 1fr auto;
      gap: 0.75rem;
      align-items: start;
      font-size: 1rem;
      color: #2c2c2c;
      padding: 0.5rem 0;
      position: relative;
    }

    .ingredient-bullet {
      color: #d35400;
      opacity: 0.5;
      font-weight: 600;
      font-size: 1.1em;
      line-height: 1.5;
    }

    .ingredient-content {
      line-height: 1.6;
    }

    .ingredient-main {
      color: #2c2c2c;
      font-weight: 500;
    }

    .ingredient-note {
      font-size: 0.9rem;
      color: #777;
      font-style: italic;
      display: block;
      margin-top: 0.2rem;
      line-height: 1.5;
    }

    .ingredient-subsection {
      grid-column: 1 / -1;
      font-family: "Playfair Display", serif;
      font-size: 1.1rem;
      font-weight: 700;
      color: #2c2c2c;
      margin-top: 1.5rem;
      margin-bottom: 0.75rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid rgba(211, 84, 0, 0.15);
    }

    .ingredient-subsection:first-child {
      margin-top: 0;
    }

    /* Add to Shopping Button */
    .add-to-shopping-btn {
      background: rgba(250, 248, 243, 0.5);
      border: 1px solid rgba(211, 84, 0, 0.2);
      color: #d35400;
      cursor: pointer;
      padding: 0.35rem 0.5rem;
      font-size: 0.75rem;
      border-radius: 2px;
      transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      line-height: 1;
      font-weight: 700;
      opacity: 0;
      transform: translateX(-5px);
      margin-top: 0.25rem;
      min-width: 2rem;
      min-height: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }

    .ingredient-line:hover .add-to-shopping-btn {
      opacity: 1;
      transform: translateX(0);
    }

    .add-to-shopping-btn:hover {
      background: #d35400;
      color: white;
      border-color: #d35400;
      transform: scale(1.08);
    }

    .add-to-shopping-btn.in-list {
      opacity: 1;
      background: #d35400;
      color: white;
      border-color: #d35400;
    }

    .btn-icon-plus {
      display: inline-block;
    }

    .btn-icon-plus::after {
      content: "+";
    }

    .add-to-shopping-btn.in-list .btn-icon-plus::after {
      content: "✓";
    }

    /* Mobile: always show buttons, larger touch targets */
    @media (max-width: 768px) {
      .add-to-shopping-btn {
        opacity: 1;
        transform: translateX(0);
        padding: 0.5rem;
        min-width: 2.5rem;
        min-height: 2.5rem;
        font-size: 0.85rem;
        background: rgba(250, 248, 243, 0.9);
      }

      .add-to-shopping-btn:active {
        background: #d35400;
        color: white;
        transform: scale(0.95);
      }
    }

    .preparation-narrative {
      margin: var(--space-3xl) 0;
    }

    /* Steps Section */
    .step-subsection {
      font-family: "Playfair Display", serif;
      font-size: 1.1rem;
      font-weight: 700;
      color: #2c2c2c;
      margin-top: 2rem;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid rgba(211, 84, 0, 0.15);
    }

    .step-subsection:first-child {
      margin-top: 0;
    }

    .step-prose {
      margin-bottom: 2rem;
      display: grid;
      grid-template-columns: 3rem 1fr;
      gap: 1.5rem;
      align-items: start;
      padding: 1.5rem 0;
      border-bottom: 1px solid rgba(211, 84, 0, 0.08);
    }

    .step-number-inline {
      font-family: "Playfair Display", serif;
      font-size: 2rem;
      font-weight: 700;
      color: #d35400;
      line-height: 1;
      text-align: center;
    }

    .step-number-inline::after {
      content: ".";
    }

    .step-text {
      font-size: 1.05rem;
      line-height: 1.75;
      color: #555;
      margin: 0;
    }

    /* Tips Card - Magazine Style */
    .tips-card {
      margin: 3rem 0;
      padding: 2rem;
      background: #fff;
      border: 2px solid rgba(211, 84, 0, 0.2);
      box-shadow:
        0 1px 3px rgba(0, 0, 0, 0.06),
        0 4px 12px rgba(0, 0, 0, 0.04);
    }

    .tips-heading {
      font-family: "Playfair Display", serif;
      font-size: 1.5rem;
      font-weight: 700;
      color: #d35400;
      margin: 0 0 1.5rem;
      display: flex;
      align-items: center;
      gap: 0.75rem;
    }

    .tips-icon {
      width: 2.5rem;
      height: 2.5rem;
      display: inline-block;
      border-radius: 50%;
      border: 1px solid rgba(211, 84, 0, 0.2);
    }

    .tips-text {
      font-size: 1.05rem;
      line-height: 1.75;
      color: #555;
      margin: 0;
    }

    /* Footer Sections */
    .recipe-categories-prose {
      margin: 3rem 0 2rem;
      padding-top: 2.5rem;
      border-top: 1px solid rgba(211, 84, 0, 0.12);
      text-align: center;
    }

    .category-line {
      font-size: 1rem;
      color: #777;
      font-style: italic;
    }

    .category-line em {
      color: #d35400;
      font-weight: 600;
      font-style: normal;
    }

    .minimal-footer {
      text-align: center;
      padding: 2rem 1rem;
      margin-top: 3rem;
      border-top: 1px solid rgba(211, 84, 0, 0.08);
    }

    .return-link {
      font-size: 0.9rem;
      color: #d35400;
      text-decoration: none;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-weight: 600;
      transition: color 0.3s ease;
    }

    .return-link:hover {
      color: #ff6b00;
    }

    /* Responsive Styles */
    @media (max-width: 768px) {
      .recipe-article {
        padding: 5.5rem 1.25rem 2rem;
      }

      .hero-image-wrapper {
        aspect-ratio: 4 / 3;
      }

      .recipe-title {
        font-size: clamp(2rem, 8vw, 2.75rem);
      }

      .recipe-description {
        font-size: 1rem;
      }

      .section-heading {
        font-size: 1.75rem;
        margin: 2.5rem 0 1.5rem;
      }

      .ingredients-layout {
        padding: 1.5rem 1.25rem;
      }

      .ingredients-grid {
        grid-template-columns: 1fr;
        gap: var(--space-sm);
      }

      .step-prose {
        grid-template-columns: 2.5rem 1fr;
        gap: 1rem;
        padding: 1.25rem 0;
      }

      .step-number-inline {
        font-size: 1.75rem;
      }

      .step-text {
        font-size: 1rem;
      }

      .tips-card {
        padding: 1.5rem;
      }

      .tips-heading {
        font-size: 1.35rem;
      }
    }

    @media (max-width: 480px) {
      .recipe-article {
        padding: 5rem var(--space-sm) var(--space-xl);
      }

      .hero-image-wrapper {
        height: 280px;
      }

      .hero-overlay {
        padding: var(--space-lg) var(--space-md);
      }

      .recipe-name {
        font-size: 1.75rem;
      }

      .meta-line {
        font-size: 1rem;
        line-height: 1.8;
      }

      .step-prose {
        grid-template-columns: 1fr;
        gap: 0.75rem;
        padding: 1rem 0;
      }

      .step-number-inline {
        font-size: 1.5rem;
        text-align: left;
        margin-bottom: 0.5rem;
      }

      .ingredients-layout {
        padding: 1.25rem 1rem;
      }

      .tips-card {
        padding: 1.25rem;
      }

      .tips-heading {
        font-size: 1.25rem;
      }
    }

    /* Print styles */
    @media print {
      .grain {
        display: none;
      }

      /* Hide navigation and interactive elements */
      nav,
      .minimal-nav,
      .meal-plan-actions,
      .add-to-shopping-btn,
      .add-to-meal-plan-btn,
      .minimal-footer,
      .nav-back,
      .nav-widgets {
        display: none !important;
      }

      /* Page breaks between sections */
      .hero-section {
        page-break-after: always;
        break-after: always;
      }

      .ingredients-prose {
        page-break-after: always;
        break-after: always;
      }

      .preparation-narrative {
        page-break-after: always;
        break-after: always;
      }

      .tips-card {
        page-break-inside: avoid;
        break-inside: avoid;
      }

      /* Avoid breaking visual steps across pages */
      .visual-step {
        page-break-inside: avoid;
        break-inside: avoid;
      }

      /* Adjust spacing for print */
      .recipe-article {
        padding: 0;
      }

      .hero-section {
        margin-bottom: 1rem;
      }

      /* Remove shadows and borders for cleaner print */
      .visual-step,
      .ingredients-layout,
      .tips-card {
        box-shadow: none;
        border: 1px solid #ddd;
      }
    }

    /* ============================================ */
    /* SCOUT THEME - Dark forest/campfire aesthetic */
    /* ============================================ */

    .recipe-article.scout-theme {
      background: linear-gradient(to bottom,
        rgba(20, 30, 20, 0.03) 0%,
        rgba(30, 40, 30, 0.02) 50%,
        transparent 100%
      );
    }

    /* Scout context tags */
    .scout-context-tags {
      display: flex;
      gap: 0.5rem;
      justify-content: center;
      flex-wrap: wrap;
      margin-bottom: 1rem;
    }

    .scout-context-tag {
      display: inline-block;
      padding: 0.4rem 1rem;
      background: linear-gradient(135deg, #2d5016 0%, #3d6820 100%);
      color: #fff;
      font-size: 0.8rem;
      font-weight: 600;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      border-radius: 20px;
      box-shadow: 0 2px 6px rgba(45, 80, 22, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1);
    }

    /* Hero section adjustments */
    .scout-theme .hero-image-wrapper {
      border-color: rgba(139, 69, 19, 0.3);
      box-shadow:
        0 2px 8px rgba(0, 0, 0, 0.15),
        0 8px 24px rgba(45, 80, 22, 0.1);
    }

    .scout-theme .category-tag {
      background: linear-gradient(135deg, #3d2817 0%, #5a4a3a 100%);
      color: #f5e6d3;
      border-color: rgba(211, 84, 0, 0.2);
    }

    .scout-theme .recipe-title {
      color: #1a2a1a;
      text-shadow: 0 2px 4px rgba(45, 80, 22, 0.05);
    }

    /* Metadata section - earthy tones */
    .scout-theme .recipe-metadata {
      background: linear-gradient(135deg,
        rgba(45, 80, 22, 0.04) 0%,
        rgba(74, 124, 37, 0.06) 100%
      );
      border-color: rgba(139, 69, 19, 0.2);
    }

    .scout-theme .meta-label {
      color: #5a4a3a;
      font-weight: 600;
    }

    .scout-theme .meta-value {
      color: #2d5016;
    }

    .scout-theme .scout-count-meta {
      background: linear-gradient(135deg,
        rgba(45, 80, 22, 0.08) 0%,
        rgba(74, 124, 37, 0.12) 100%
      );
      border-radius: 8px;
      padding: 0.5rem;
      border: 1px solid rgba(74, 124, 37, 0.2);
    }

    .scout-theme .scout-count-meta .meta-label {
      color: #2d5016;
      font-weight: 700;
    }

    .scout-theme .scout-count-meta .meta-value {
      color: #2d5016;
      font-weight: 700;
    }

    /* Recipe note - campfire accent */
    .scout-theme .recipe-note {
      background: linear-gradient(135deg,
        rgba(74, 124, 37, 0.06) 0%,
        rgba(45, 80, 22, 0.04) 100%
      );
      border-color: rgba(74, 124, 37, 0.25);
      color: #2d2417;
    }

    .scout-theme .note-heading {
      color: #4a7c25;
    }

    /* Meal plan button - forest green */
    .scout-theme .add-to-meal-plan-btn {
      background: linear-gradient(135deg, #2d5016 0%, #3d6820 100%);
      border-color: rgba(74, 124, 37, 0.4);
      color: #fff;
    }

    .scout-theme .add-to-meal-plan-btn:hover {
      background: linear-gradient(135deg, #3d6820 0%, #4a7c25 100%);
      border-color: rgba(74, 124, 37, 0.6);
      box-shadow: 0 4px 16px rgba(45, 80, 22, 0.3);
    }

    .scout-theme .add-to-meal-plan-btn.in-plan {
      background: linear-gradient(135deg, #d35400 0%, #ff6b00 100%);
      border-color: rgba(211, 84, 0, 0.6);
    }

    /* Section headings - forest theme */
    .scout-theme .section-heading {
      color: #2d5016;
      border-bottom-color: rgba(139, 69, 19, 0.25);
    }

    .scout-theme .section-heading::after {
      background: linear-gradient(to right,
        rgba(74, 124, 37, 0.3) 0%,
        rgba(74, 124, 37, 0) 100%
      );
    }

    /* Ingredients section */
    .scout-theme .ingredients-layout {
      background: rgba(250, 248, 243, 0.6);
      border-color: rgba(139, 69, 19, 0.15);
    }

    .scout-theme .ingredient-line {
      border-bottom-color: rgba(139, 69, 19, 0.08);
    }

    .scout-theme .ingredient-bullet {
      color: #5a4a3a;
    }

    .scout-theme .ingredient-main {
      color: #2c2825;
    }

    .scout-theme .ingredient-note {
      color: #5a4a3a;
    }

    .scout-theme .ingredient-subsection {
      background: linear-gradient(135deg,
        rgba(45, 80, 22, 0.06) 0%,
        rgba(74, 124, 37, 0.04) 100%
      );
      color: #2d5016;
      border-left-color: #4a7c25;
    }

    /* Shopping list button - campfire orange */
    .scout-theme .add-to-shopping-btn {
      color: #8b4513;
      border-color: rgba(139, 69, 19, 0.2);
    }

    .scout-theme .add-to-shopping-btn:hover {
      background: rgba(211, 84, 0, 0.08);
      border-color: rgba(211, 84, 0, 0.4);
      color: #d35400;
    }

    .scout-theme .add-to-shopping-btn.in-list {
      background: linear-gradient(135deg, #d35400 0%, #ff6b00 100%);
      border-color: rgba(211, 84, 0, 0.6);
      color: #fff;
    }

    /* Steps section */
    .scout-theme .step-number-inline {
      background: linear-gradient(135deg, #2d5016 0%, #3d6820 100%);
      color: #fff;
      box-shadow: 0 2px 6px rgba(45, 80, 22, 0.25);
    }

    .scout-theme .step-prose {
      border-left-color: rgba(74, 124, 37, 0.15);
    }

    .scout-theme .step-prose:hover .step-number-inline {
      background: linear-gradient(135deg, #3d6820 0%, #4a7c25 100%);
      box-shadow: 0 3px 10px rgba(45, 80, 22, 0.35);
    }

    .scout-theme .step-subsection {
      background: linear-gradient(135deg,
        rgba(45, 80, 22, 0.06) 0%,
        rgba(74, 124, 37, 0.04) 100%
      );
      color: #2d5016;
      border-left-color: #4a7c25;
    }

    /* Tips card - warm campfire glow */
    .scout-theme .tips-card {
      background: linear-gradient(135deg,
        rgba(211, 84, 0, 0.06) 0%,
        rgba(255, 140, 66, 0.04) 50%,
        rgba(211, 84, 0, 0.06) 100%
      );
      border-color: rgba(211, 84, 0, 0.2);
      box-shadow:
        0 2px 8px rgba(211, 84, 0, 0.08),
        0 8px 24px rgba(211, 84, 0, 0.05);
    }

    .scout-theme .tips-heading {
      color: #3d2817;
    }

    .scout-theme .tips-text {
      color: #2c2825;
    }

    /* Portion Selector - Scout Theme */
    .scout-theme .portion-selector-sticky {
      background: linear-gradient(135deg,
        rgba(45, 80, 22, 0.95) 0%,
        rgba(30, 60, 15, 0.97) 100%
      );
      border-bottom-color: rgba(139, 69, 19, 0.4);
    }

    .scout-theme .selector-label {
      color: #d4e5c9;
    }

    .scout-theme .portion-controls {
      background: rgba(255, 255, 255, 0.08);
      border-color: rgba(139, 69, 19, 0.5);
    }

    .scout-theme .portion-btn {
      background: rgba(139, 69, 19, 0.15);
      border-color: rgba(139, 69, 19, 0.4);
      color: #f5e6d3;
    }

    .scout-theme .portion-btn:hover {
      background: rgba(139, 69, 19, 0.25);
      border-color: rgba(139, 69, 19, 0.6);
    }

    .scout-theme .portion-input {
      background: rgba(255, 255, 255, 0.12);
      border-color: rgba(139, 69, 19, 0.3);
      color: #f5e6d3;
    }

    .scout-theme .portion-input:focus {
      border-color: #8b4513;
      background: rgba(255, 255, 255, 0.16);
      box-shadow: 0 0 0 3px rgba(139, 69, 19, 0.15);
    }

    .scout-theme .selector-unit {
      color: #b8c9ad;
    }

    .scout-theme .reset-btn {
      background: rgba(255, 255, 255, 0.08);
      border-color: rgba(139, 69, 19, 0.3);
      color: #d4e5c9;
    }

    .scout-theme .reset-btn:hover {
      background: rgba(255, 255, 255, 0.15);
      border-color: rgba(139, 69, 19, 0.5);
      color: #f5e6d3;
    }

    /* Footer */
    .scout-theme + .minimal-footer .return-link {
      color: #2d5016;
      border-color: rgba(74, 124, 37, 0.3);
    }

    .scout-theme + .minimal-footer .return-link:hover {
      background: rgba(45, 80, 22, 0.06);
      border-color: rgba(74, 124, 37, 0.5);
      color: #3d6820;
    }

    /* Mobile adjustments */
    @media (max-width: 768px) {
      .scout-context-tags {
        gap: 0.4rem;
      }

      .scout-context-tag {
        font-size: 0.7rem;
        padding: 0.3rem 0.8rem;
      }
    }
  </style>

  <script>
    import {
      addRecipe,
      removeRecipe,
      isInMealPlan,
    } from "../../lib/meal-plan-manager.js";
    import {
      addIngredient,
      removeIngredient,
      isInShoppingList,
      getShoppingList,
    } from "../../lib/shopping-list-manager.js";

    // ===== Portion Scaling Functionality =====

    // Parse quantity string to number (handles "1", "1.5", "1,5", "1-2", "¼", "2½", etc.)
    function parseQuantity(quantityStr: string | null): number | null {
      if (!quantityStr) return null;

      const str = quantityStr.trim();

      // Map of Unicode fractions to decimal values
      const unicodeFractions: Record<string, number> = {
        '⅛': 0.125, '¼': 0.25, '⅓': 0.333, '⅜': 0.375,
        '½': 0.5, '⅝': 0.625, '⅔': 0.666, '¾': 0.75, '⅞': 0.875,
      };

      // Handle mixed numbers like "2½" or "1¼" or just "¼"
      let result = 0;
      let remainingStr = str;

      // Extract whole number if present at the start
      const wholeMatch = remainingStr.match(/^(\d+)/);
      if (wholeMatch) {
        result = parseInt(wholeMatch[1]);
        remainingStr = remainingStr.substring(wholeMatch[1].length);
      }

      // Check for Unicode fraction
      for (const [frac, value] of Object.entries(unicodeFractions)) {
        if (remainingStr.includes(frac)) {
          result += value;
          return result;
        }
      }

      // If we found a whole number but no fraction, return it
      if (wholeMatch && remainingStr.trim() === '') {
        return result;
      }

      // Handle ranges like "1-2" or "2-3" - take the average (avoid matching "c. à")
      if (str.includes('-') && !str.includes('c.')) {
        const parts = str.split('-').map(p => parseFloat(p.replace(',', '.')));
        if (parts.length === 2 && !isNaN(parts[0]) && !isNaN(parts[1])) {
          return (parts[0] + parts[1]) / 2;
        }
      }

      // Handle European decimal comma "1,5" -> "1.5"
      const normalized = str.replace(',', '.');
      const parsed = parseFloat(normalized);

      return isNaN(parsed) ? null : parsed;
    }

    // Convert number to smart fraction display
    function toSmartFraction(num: number): string {
      // Special case: 0
      if (num === 0) return '0';

      // Extract whole and fractional parts
      const whole = Math.floor(num);
      const frac = num - whole;

      // Define common fractions with their Unicode characters
      const fractions: [number, string][] = [
        [0.125, '⅛'],
        [0.25, '¼'],
        [0.333, '⅓'],
        [0.375, '⅜'],
        [0.5, '½'],
        [0.625, '⅝'],
        [0.666, '⅔'],
        [0.75, '¾'],
        [0.875, '⅞'],
      ];

      // Find closest fraction (within 0.02 tolerance)
      let closestFrac = '';
      let minDiff = 0.02;

      for (const [value, symbol] of fractions) {
        const diff = Math.abs(frac - value);
        if (diff < minDiff) {
          minDiff = diff;
          closestFrac = symbol;
        }
      }

      // Build result string
      if (closestFrac) {
        return whole > 0 ? `${whole}${closestFrac}` : closestFrac;
      } else if (frac < 0.01) {
        // Essentially a whole number
        return whole.toString();
      } else {
        // Use decimal, but round smartly
        if (num < 10) {
          // For small numbers, show 1 decimal
          return num.toFixed(1).replace(/\.0$/, '');
        } else {
          // For larger numbers, round to nearest whole
          return Math.round(num).toString();
        }
      }
    }

    // Update all ingredient quantities based on selected portions
    function updateIngredientQuantities(scaleFactor: number) {
      const ingredientElements = document.querySelectorAll('.ingredient-main[data-original-quantity]');

      ingredientElements.forEach((el) => {
        const element = el as HTMLElement;
        const originalQuantity = element.dataset.originalQuantity;
        const unit = element.dataset.originalUnit;
        const name = element.dataset.ingredientName;

        if (!originalQuantity || !name) return;

        // Parse original quantity
        const parsedQty = parseQuantity(originalQuantity);

        if (parsedQty === null) {
          // Can't parse, leave as-is
          return;
        }

        // Scale it
        const scaledQty = parsedQty * scaleFactor;

        // Convert to smart fraction
        const displayQty = toSmartFraction(scaledQty);

        // Rebuild the text
        let newText = '';
        if (unit) {
          newText = `${displayQty} ${unit} de ${name}`;
        } else {
          newText = `${displayQty} ${name}`;
        }

        element.textContent = newText;
      });
    }

    // Initialize portion selector
    const portionSelector = document.getElementById('portionSelector');
    const decreaseBtn = document.getElementById('decreaseBtn');
    const increaseBtn = document.getElementById('increaseBtn');
    const portionInput = document.getElementById('portionInput') as HTMLInputElement | null;
    const resetBtn = document.getElementById('resetBtn');

    if (portionSelector && decreaseBtn && increaseBtn && portionInput && resetBtn) {
      const originalServings = parseInt(portionSelector.dataset.originalServings || '1');

      function updatePortions(newValue: number) {
        // Clamp between 1 and 1000
        const clampedValue = Math.max(1, Math.min(1000, newValue));
        portionInput.value = clampedValue.toString();

        // Calculate scale factor
        const scaleFactor = clampedValue / originalServings;

        // Update all ingredients
        updateIngredientQuantities(scaleFactor);

        // Visual feedback
        if (clampedValue !== originalServings) {
          portionSelector.style.transform = 'scale(1.02)';
          setTimeout(() => {
            portionSelector.style.transform = 'scale(1)';
          }, 150);
        }
      }

      // Decrease button
      decreaseBtn.addEventListener('click', () => {
        const current = parseInt(portionInput.value) || originalServings;
        updatePortions(current - 1);
      });

      // Increase button
      increaseBtn.addEventListener('click', () => {
        const current = parseInt(portionInput.value) || originalServings;
        updatePortions(current + 1);
      });

      // Input change
      portionInput.addEventListener('change', () => {
        const value = parseInt(portionInput.value) || originalServings;
        updatePortions(value);
      });

      // Input keydown (Enter key)
      portionInput.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          const value = parseInt(portionInput.value) || originalServings;
          updatePortions(value);
          portionInput.blur();
        }
      });

      // Reset button
      resetBtn.addEventListener('click', () => {
        updatePortions(originalServings);
      });
    }

    // ===== End Portion Scaling =====

    // Meal Plan functionality
    const addButton = document.getElementById("addToMealPlan") as HTMLButtonElement | null;
    const btnIcon = document.getElementById("btnIcon");
    const btnText = document.getElementById("btnText");

    if (addButton && btnIcon && btnText) {
      const recipeId = addButton.dataset.recipeId;

      if (!recipeId) {
        console.error("Recipe ID not found");
      } else {
        // Update button state
        function updateButtonState() {
          if (!addButton || !btnIcon || !btnText || !recipeId) return;

          const inPlan = isInMealPlan(recipeId);

          if (inPlan) {
            addButton.classList.add("in-plan");
            btnIcon.textContent = "✓";
            btnText.textContent = "Dans le plan";
          } else {
            addButton.classList.remove("in-plan");
            btnIcon.textContent = "+";
            btnText.textContent = "Ajouter au plan repas";
          }
        }

        // Handle button click
        addButton.addEventListener("click", () => {
          if (!recipeId) return;

          const inPlan = isInMealPlan(recipeId);

          if (inPlan) {
            removeRecipe(recipeId);
          } else {
            addRecipe(recipeId);
          }

          updateButtonState();
        });

        // Listen for updates from other components
        window.addEventListener("mealPlanUpdated", () => {
          updateButtonState();
        });

        // Initial state
        updateButtonState();
      }
    }

    // Shopping List functionality
    const shoppingButtons = document.querySelectorAll(".add-to-shopping-btn");

    function updateShoppingButtonStates() {
      shoppingButtons.forEach((btn) => {
        const button = btn as HTMLButtonElement;
        const recipeId = button.dataset.recipeId;
        const ingredientIndex = parseInt(button.dataset.ingredientIndex || "0");

        if (recipeId && !isNaN(ingredientIndex)) {
          if (isInShoppingList(recipeId, ingredientIndex)) {
            button.classList.add("in-list");
            button.setAttribute("aria-label", "Retirer de la liste d'épicerie");
          } else {
            button.classList.remove("in-list");
            button.setAttribute("aria-label", "Ajouter à la liste d'épicerie");
          }
        }
      });
    }

    shoppingButtons.forEach((btn) => {
      btn.addEventListener("click", (e) => {
        e.preventDefault();
        const button = btn as HTMLButtonElement;
        const recipeId = button.dataset.recipeId;
        const recipeName = button.dataset.recipeName;
        const ingredientIndex = parseInt(button.dataset.ingredientIndex || "0");

        if (!recipeId || !recipeName || isNaN(ingredientIndex)) {
          console.error("Missing ingredient data");
          return;
        }

        const ingredientData = {
          quantity: button.dataset.quantity || null,
          unit: button.dataset.unit || null,
          ingredient: button.dataset.ingredient || "",
          note: button.dataset.note || null,
        };

        // Check if already in list
        if (isInShoppingList(recipeId, ingredientIndex)) {
          // Find and remove the ingredient
          const shoppingList = getShoppingList();
          const item = shoppingList.find(
            (item) => item.recipeId === recipeId && item.ingredientIndex === ingredientIndex
          );
          if (item) {
            removeIngredient(item.id);
          }
        } else {
          // Add to list
          addIngredient(recipeId, recipeName, ingredientIndex, ingredientData);
        }

        updateShoppingButtonStates();
      });
    });

    // Listen for updates from other components
    window.addEventListener("shoppingListUpdated", () => {
      updateShoppingButtonStates();
    });

    // Initial state
    updateShoppingButtonStates();
  </script>
</CuisineLayout>
