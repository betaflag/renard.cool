---
import MeteoLayout from '../../layouts/MeteoLayout.astro';
import LocationControls from '../../components/meteo/LocationControls.astro';
import LoadingState from '../../components/meteo/LoadingState.astro';
import ErrorMessage from '../../components/meteo/ErrorMessage.astro';
import CurrentWeather from '../../components/meteo/CurrentWeather.astro';
import TodayForecast from '../../components/meteo/TodayForecast.astro';
import SmartTips from '../../components/meteo/SmartTips.astro';
import FiveDayForecast from '../../components/meteo/FiveDayForecast.astro';
---

<MeteoLayout title="Météo Renard">
  <header class="header">
    <h1 class="title">Météo <span class="cool">Renard</span></h1>
    <p class="tagline">Les prévisions futées du renard</p>
  </header>

  <LocationControls />
  <LoadingState />
  <ErrorMessage />
  <CurrentWeather />
  <TodayForecast />
  <SmartTips />
  <FiveDayForecast />
</MeteoLayout>

<style>
  .header {
    text-align: center;
    margin-bottom: 40px;
  }

  .title {
    font-family: "Cinzel", serif;
    font-size: 3rem;
    font-weight: 600;
    margin-bottom: 10px;
    text-shadow: 0 0 30px rgba(255, 107, 0, 0.5);
    animation: titleGlow 3s ease-in-out infinite alternate;
  }

  .cool {
    color: #ff6b00;
    text-shadow: 0 0 20px rgba(255, 107, 0, 0.8);
  }

  .tagline {
    color: #a8a8a8;
    font-weight: 300;
    font-size: 1.1rem;
    letter-spacing: 0.1em;
  }

  @media (max-width: 768px) {
    .title {
      font-size: 2rem;
    }
  }
</style>

<script>
  import { saveLocation, loadLocation, clearStoredLocation } from '../../lib/meteo/storage.js';
  import { getCityName, fetchWeather } from '../../lib/meteo/api.js';
  import {
    showLoading,
    hideLoading,
    showError,
    hideError,
    updateCurrentWeather,
    updateTodayForecast,
    updateFiveDayForecast,
  } from '../../lib/meteo/dom-updates.js';

  /**
   * Main function to get location and fetch weather
   */
  async function getWeatherForLocation() {
    hideError();
    showLoading();

    const locationBtn = document.getElementById("location-btn");
    if (locationBtn) {
      locationBtn.disabled = true;
    }

    try {
      // Get user's location
      const position = await new Promise((resolve, reject) => {
        navigator.geolocation.getCurrentPosition(resolve, reject, {
          enableHighAccuracy: true,
          timeout: 10000,
          maximumAge: 0,
        });
      });

      const { latitude, longitude } = position.coords;

      // Get city name and update display
      const cityName = await getCityName(latitude, longitude);
      const locationNameEl = document.querySelector(".location-name");
      if (locationNameEl) {
        locationNameEl.textContent = cityName;
      }

      const locationDisplay = document.getElementById("location-display");
      if (locationDisplay) {
        locationDisplay.classList.remove("hidden");
      }

      if (locationBtn) {
        locationBtn.classList.add("hidden");
      }

      // Save location to localStorage
      saveLocation(latitude, longitude, cityName);

      // Fetch and display weather
      const weatherData = await fetchWeather(latitude, longitude);
      updateCurrentWeather(weatherData);
      updateTodayForecast(weatherData);
      updateFiveDayForecast(weatherData);

    } catch (error) {
      console.error("Error:", error);

      if (error.code === 1) {
        showError(
          "Veuillez autoriser l'accès à votre position pour obtenir la météo locale."
        );
      } else if (error.code === 2) {
        showError(
          "Impossible d'obtenir votre position. Vérifiez votre connexion."
        );
      } else if (error.code === 3) {
        showError(
          "La demande de localisation a expiré. Veuillez réessayer."
        );
      } else {
        showError("Une erreur est survenue. Veuillez réessayer plus tard.");
      }
    } finally {
      hideLoading();
      if (locationBtn) {
        locationBtn.disabled = false;
      }
    }
  }

  /**
   * Load weather from stored location
   */
  async function loadWeatherFromStorage() {
    const storedLocation = loadLocation();
    if (!storedLocation) return false;

    try {
      // Show stored location
      const locationNameEl = document.querySelector(".location-name");
      if (locationNameEl) {
        locationNameEl.textContent = storedLocation.cityName;
      }

      const locationDisplay = document.getElementById("location-display");
      if (locationDisplay) {
        locationDisplay.classList.remove("hidden");
      }

      const locationBtn = document.getElementById("location-btn");
      if (locationBtn) {
        locationBtn.classList.add("hidden");
      }

      // Show loading
      showLoading();

      // Fetch and display weather
      const weatherData = await fetchWeather(
        storedLocation.latitude,
        storedLocation.longitude
      );
      updateCurrentWeather(weatherData);
      updateTodayForecast(weatherData);
      updateFiveDayForecast(weatherData);

      hideLoading();
      return true;
    } catch (error) {
      console.error("Error loading weather from storage:", error);
      clearStoredLocation();
      hideLoading();
      return false;
    }
  }

  /**
   * Handle clear location button
   */
  function handleClearLocation() {
    clearStoredLocation();

    // Reset UI
    const locationDisplay = document.getElementById("location-display");
    if (locationDisplay) {
      locationDisplay.classList.add("hidden");
    }

    const locationBtn = document.getElementById("location-btn");
    if (locationBtn) {
      locationBtn.classList.remove("hidden");
    }

    document.getElementById("current-weather")?.classList.add("hidden");
    document.getElementById("today-forecast")?.classList.add("hidden");
    document.getElementById("smart-tips")?.classList.add("hidden");
    document.getElementById("forecast")?.classList.add("hidden");
    hideError();
  }

  /**
   * Initialize when page loads
   */
  document.addEventListener("DOMContentLoaded", async () => {
    // Initialize Lucide icons
    if (window.lucide) {
      window.lucide.createIcons();
    }

    const locationBtn = document.getElementById("location-btn");
    if (locationBtn) {
      locationBtn.addEventListener("click", getWeatherForLocation);
    }

    const clearBtn = document.getElementById("clear-location-btn");
    if (clearBtn) {
      clearBtn.addEventListener("click", handleClearLocation);
    }

    // Check if geolocation is supported
    if (!navigator.geolocation) {
      showError(
        "La géolocalisation n'est pas supportée par votre navigateur."
      );
      if (locationBtn) {
        locationBtn.disabled = true;
      }
      return;
    }

    // Try to load weather from stored location
    const loaded = await loadWeatherFromStorage();
    if (loaded) {
      // Refresh Lucide icons after loading stored location
      if (window.lucide) {
        window.lucide.createIcons();
      }
    }
  });
</script>
