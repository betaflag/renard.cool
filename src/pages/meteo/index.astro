---
import BaseLayout from '../../layouts/BaseLayout.astro';
---

<BaseLayout title="Météo Renard" description="Application météo avec conseils rusés de Renard">
  <div class="meteo-wrapper">
    <div class="container">
      <!-- 5-Day Forecast Banner -->
      <div class="forecast-banner" id="forecast-section" style="display: block;">
        <div class="forecast-items" id="forecast-grid">
          <!-- Forecast items will be populated by JavaScript -->
        </div>
      </div>

      <!-- Main Content with original structure -->
      <main class="main" id="app-content">
        <div class="content" id="weather-section">
          <!-- Loading State -->
          <div class="loading" id="loading-state">
            <div class="loading-spinner">
              <i data-lucide="sun" class="spin" width="48" height="48"></i>
            </div>
            <p class="loading-text" id="loading-text">
              Renard observe le ciel...
            </p>
          </div>
        </div>
      </main>

      <!-- Language Control (floating) -->
      <div class="floating-controls">
        <button class="lang-btn" onclick="toggleLanguage()" aria-label="Language">
          <span id="lang-indicator">FR</span>
        </button>
      </div>
    </div>

  </div>

  <style>
    .meteo-wrapper {
      max-width: 1200px;
      margin: 0 auto;
      padding: 2rem 0;
      position: relative;
      width: 100%;
    }

    /* Override some base styles to work with meteo CSS */
    .meteo-wrapper .container {
      background: transparent;
      position: relative;
      width: 100%;
      max-width: none;
    }

    /* Hide clothing recommendations - they take too much space */
    .clothing-section {
      display: none !important;
    }

    /* 5-Day Forecast Banner */
    .forecast-banner {
      background: linear-gradient(
        135deg,
        rgba(0, 0, 0, 0.15) 0%,
        rgba(255, 107, 0, 0.02) 50%,
        rgba(0, 0, 0, 0.12) 100%
      );
      border: 1px solid rgba(255, 107, 0, 0.15);
      border-radius: 12px;
      padding: 1rem 1.5rem;
      margin: 0 1rem 1.5rem;
      backdrop-filter: blur(10px) saturate(1.1);
      width: calc(100% - 2rem);
      box-sizing: border-box;
      position: relative;
      overflow: hidden;
      box-shadow: 
        0 4px 20px rgba(0, 0, 0, 0.15),
        inset 0 1px 0 rgba(255, 255, 255, 0.08);
      opacity: 0.9;
    }

    .forecast-banner::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      height: 1px;
      background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 107, 0, 0.2),
        transparent
      );
      animation: shimmer 4s ease-in-out infinite;
    }

    @keyframes shimmer {
      0%, 100% { opacity: 0.1; }
      50% { opacity: 0.4; }
    }

    @keyframes fadeInUp {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }


    .forecast-banner {
      animation: fadeInUp 0.6s ease-out;
    }

    .forecast-items {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 1rem;
      position: relative;
      z-index: 1;
    }

    .forecast-day-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      flex: 1;
      text-align: center;
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
      padding: 0.6rem 0.4rem;
      border-radius: 8px;
      position: relative;
      cursor: pointer;
      background: rgba(255, 255, 255, 0.01);
      border: 1px solid rgba(255, 255, 255, 0.03);
      animation: fadeInUp 0.6s ease-out;
      animation-delay: calc(var(--item-index, 0) * 0.08s);
    }

    .forecast-day-item:not(:last-child)::after {
      content: '';
      position: absolute;
      right: -0.5rem;
      top: 25%;
      bottom: 25%;
      width: 1px;
      background: linear-gradient(
        to bottom,
        transparent,
        rgba(255, 107, 0, 0.15),
        transparent
      );
    }

    .forecast-day-item:hover {
      background: rgba(255, 107, 0, 0.06);
      border-color: rgba(255, 107, 0, 0.2);
      transform: translateY(-2px) scale(1.01);
      box-shadow: 
        0 4px 15px rgba(255, 107, 0, 0.08),
        0 0 0 1px rgba(255, 107, 0, 0.1);
    }

    .day-label {
      font-size: 0.7rem;
      color: rgba(255, 255, 255, 0.7);
      margin-bottom: 0.4rem;
      font-weight: 500;
      letter-spacing: 0.3px;
      text-transform: uppercase;
      font-family: 'Raleway', sans-serif;
    }

    .day-icon {
      font-size: 1.8rem;
      margin-bottom: 0.4rem;
      filter: drop-shadow(0 0 8px rgba(255, 107, 0, 0.2));
      transition: all 0.3s ease;
      opacity: 0.9;
      display: flex;
      align-items: center;
      justify-content: center;
      height: 2rem;
      line-height: 1;
    }

    .forecast-day-item:hover .day-icon {
      transform: scale(1.05) translateY(-1px);
      filter: drop-shadow(0 0 12px rgba(255, 107, 0, 0.3));
      opacity: 1;
    }

    .day-temp {
      font-size: 0.75rem;
      color: rgba(255, 255, 255, 0.85);
      font-weight: 600;
      letter-spacing: 0.2px;
      text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    }

    .day-temp .temp-high {
      color: rgba(255, 255, 255, 0.95);
    }

    .day-temp .temp-separator {
      color: rgba(255, 255, 255, 0.4);
      margin: 0 1px;
    }

    .day-temp .temp-low {
      color: rgba(255, 255, 255, 0.6);
    }

    /* Adjust weather display for better integration */
    .weather-hero {
      max-width: 800px;
      margin: 0 auto 2rem;
    }

    .tips-section,
    .advice-card {
      max-width: 800px;
      margin: 0 auto 1.5rem;
    }

    .floating-controls {
      position: fixed;
      top: 100px;
      right: 20px;
      z-index: 100;
    }

    .lang-btn {
      width: 60px;
      height: 40px;
      border-radius: 20px;
      background: rgba(0, 0, 0, 0.8);
      border: 1px solid rgba(255, 107, 0, 0.4);
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 2px 15px rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(10px);
      font-family: 'Cinzel', serif;
      font-weight: 600;
      font-size: 0.85rem;
      color: #ffffff;
    }

    .lang-btn:hover {
      background: rgba(255, 107, 0, 0.2);
      border-color: #ff6b00;
      color: #ff6b00;
      box-shadow: 0 4px 25px rgba(255, 107, 0, 0.4);
      transform: translateY(-2px);
    }


    /* Mobile Responsive */
    @media (max-width: 768px) {
      .floating-controls {
        position: fixed;
        top: auto;
        bottom: 20px;
        right: 20px;
      }

      .forecast-banner {
        margin: 0 1rem 1.5rem;
        padding: 0.9rem 1.2rem;
        width: calc(100% - 2rem);
        border-radius: 10px;
      }

      .forecast-items {
        gap: 0.8rem;
      }

      .forecast-day-item {
        padding: 0.5rem 0.3rem;
      }

      .forecast-day-item:not(:last-child)::after {
        right: -0.4rem;
      }

      .day-label {
        font-size: 0.65rem;
        margin-bottom: 0.3rem;
      }

      .day-icon {
        font-size: 1.6rem;
        margin-bottom: 0.3rem;
        height: 1.8rem;
      }

      .day-temp {
        font-size: 0.7rem;
      }
    }

    @media (max-width: 480px) {
      .floating-controls {
        bottom: 15px;
        right: 15px;
      }

      .lang-btn {
        width: 55px;
        height: 35px;
        font-size: 0.8rem;
      }

      .forecast-banner {
        margin: 0 0.75rem 1.25rem;
        padding: 0.8rem 1rem;
        width: calc(100% - 1.5rem);
        border-radius: 8px;
      }

      .forecast-items {
        gap: 0.5rem;
      }

      .forecast-day-item {
        padding: 0.4rem 0.25rem;
      }

      .forecast-day-item:not(:last-child)::after {
        right: -0.25rem;
      }

      .day-label {
        font-size: 0.6rem;
        margin-bottom: 0.25rem;
      }

      .day-icon {
        font-size: 1.4rem;
        margin-bottom: 0.25rem;
        height: 1.6rem;
      }

      .day-temp {
        font-size: 0.65rem;
      }
    }

    @media (max-width: 360px) {
      .forecast-banner {
        margin: 0 0.5rem 1rem;
        padding: 0.7rem 0.8rem;
        width: calc(100% - 1rem);
      }

      .forecast-items {
        gap: 0.3rem;
      }

      .forecast-day-item {
        padding: 0.35rem 0.15rem;
      }

      .day-label {
        font-size: 0.55rem;
      }

      .day-icon {
        font-size: 1.3rem;
        height: 1.5rem;
      }

      .day-temp {
        font-size: 0.6rem;
      }
    }
  </style>

  <!-- Include original meteo styles -->
  <link rel="stylesheet" href="/meteo/styles.css" />
  
  <!-- Include Lucide Icons -->
  <script is:inline src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
  
  <!-- Keep existing weather app scripts -->
  <script is:inline src="/meteo/js/translations.js"></script>
  <script is:inline src="/meteo/js/app.js"></script>
  
  <!-- Ensure icons are loaded -->
  <script is:inline>
    // Create a global function to refresh icons
    window.refreshIcons = function() {
      if (window.lucide) {
        setTimeout(() => lucide.createIcons(), 50);
      }
    };

    // Set up a MutationObserver to watch for DOM changes
    const observer = new MutationObserver(() => {
      window.refreshIcons();
    });

    // Start observing when DOM is ready
    document.addEventListener('DOMContentLoaded', () => {
      const weatherSection = document.getElementById('weather-section');
      if (weatherSection) {
        observer.observe(weatherSection, {
          childList: true,
          subtree: true
        });
      }
      // Initial icon creation
      window.refreshIcons();
    });
  </script>

  <!-- 5-Day Forecast Functionality -->
  <script is:inline>
    // Weather icon mapping for Open-Meteo codes
    const forecastWeatherIcons = {
      0: '☀️',        // Clear sky
      1: '🌤️',       // Mainly clear
      2: '⛅',        // Partly cloudy
      3: '☁️',        // Overcast
      45: '🌫️',      // Fog
      48: '🌫️',      // Depositing rime fog
      51: '🌦️',      // Light drizzle
      53: '🌦️',      // Moderate drizzle
      55: '🌧️',      // Dense drizzle
      56: '🌧️',      // Light freezing drizzle
      57: '🌧️',      // Dense freezing drizzle
      61: '🌧️',      // Slight rain
      63: '🌧️',      // Moderate rain
      65: '🌧️',      // Heavy rain
      66: '🌧️',      // Light freezing rain
      67: '🌧️',      // Heavy freezing rain
      71: '❄️',       // Slight snow fall
      73: '❄️',       // Moderate snow fall
      75: '❄️',       // Heavy snow fall
      77: '❄️',       // Snow grains
      80: '🌦️',      // Slight rain showers
      81: '🌧️',      // Moderate rain showers
      82: '🌧️',      // Violent rain showers
      85: '❄️',       // Slight snow showers
      86: '❄️',       // Heavy snow showers
      95: '⛈️',       // Thunderstorm
      96: '⛈️',       // Thunderstorm with slight hail
      99: '⛈️'        // Thunderstorm with heavy hail
    };

    // Get weather icon by code
    function getForecastWeatherIcon(code) {
      return forecastWeatherIcons[code] || '🌤️';
    }

    // Format day name for banner
    function formatDay(dateStr, lang = 'fr') {
      const date = new Date(dateStr);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      
      const tomorrow = new Date(today);
      tomorrow.setDate(today.getDate() + 1);

      const inputDate = new Date(date);
      inputDate.setHours(0, 0, 0, 0);

      if (inputDate.getTime() === today.getTime()) {
        return lang === 'fr' ? 'Auj.' : 'Today';
      } else if (inputDate.getTime() === tomorrow.getTime()) {
        return lang === 'fr' ? 'Dem.' : 'Tom.';
      } else {
        const options = { weekday: 'short' };
        const dayName = inputDate.toLocaleDateString(lang === 'fr' ? 'fr-FR' : 'en-US', options);
        return lang === 'fr' ? dayName.charAt(0).toUpperCase() + dayName.slice(1, 3) + '.' : dayName.substring(0, 3);
      }
    }

    // Display 5-day forecast
    function displayForecast(forecastData, currentLang = 'fr') {
      const forecastSection = document.getElementById('forecast-section');
      const forecastGrid = document.getElementById('forecast-grid');
      
      if (!forecastData || !forecastData.daily) return;

      // Clear existing forecast
      forecastGrid.innerHTML = '';

      // Create forecast items for banner (use up to 5 days)
      const dailyData = forecastData.daily;
      const maxDays = Math.min(5, dailyData.time.length);
      
      for (let i = 0; i < maxDays; i++) {
        const dateStr = dailyData.time[i];
        const dayName = formatDay(dateStr, currentLang);
        const weatherCode = dailyData.weather_code[i];
        const icon = getForecastWeatherIcon(weatherCode);
        const highTemp = Math.round(dailyData.temperature_2m_max[i]);
        const lowTemp = Math.round(dailyData.temperature_2m_min[i]);

        const forecastItem = document.createElement('div');
        forecastItem.className = 'forecast-day-item';
        forecastItem.style.setProperty('--item-index', i);
        forecastItem.innerHTML = `
          <div class="day-label">${dayName}</div>
          <div class="day-icon">${icon}</div>
          <div class="day-temp">
            <span class="temp-high">${highTemp}°</span><span class="temp-separator">/</span><span class="temp-low">${lowTemp}°</span>
          </div>
        `;

        forecastGrid.appendChild(forecastItem);
      }

      // Show forecast section
      forecastSection.style.display = 'block';
    }

    // Fetch 5-day forecast using Open-Meteo API
    async function fetchForecast(lat, lon) {
      try {
        const response = await fetch(
          `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&daily=temperature_2m_max,temperature_2m_min,weather_code&timezone=auto&forecast_days=5`
        );
        const data = await response.json();
        return data;
      } catch (error) {
        console.error('Error fetching forecast:', error);
        return null;
      }
    }

    // Load forecast independently after page loads
    document.addEventListener('DOMContentLoaded', () => {
      // Wait a bit for the main app to load, then try to load forecast
      setTimeout(async () => {
        try {
          // Get current language
          const langIndicator = document.getElementById('lang-indicator');
          const currentLang = langIndicator?.textContent === 'EN' ? 'en' : 'fr';
          
          // Get location using the same function as main app
          if (window.getLocation) {
            const location = await window.getLocation();
            
            if (location) {
              const forecastData = await fetchForecast(location.lat, location.lon);
              
              if (forecastData) {
                displayForecast(forecastData, currentLang);
              }
            }
          }
        } catch (error) {
          console.error('Error loading forecast:', error);
        }
      }, 1000); // Wait 1 second for main app to initialize
      
      // Also hook into existing functions if they become available later
      const originalLoadWeatherData = window.loadWeatherData;
      if (originalLoadWeatherData) {
        window.loadWeatherData = async function() {
          const result = await originalLoadWeatherData.call(this);
          
          // Also load forecast
          setTimeout(async () => {
            try {
              const langIndicator = document.getElementById('lang-indicator');
              const currentLang = langIndicator?.textContent === 'EN' ? 'en' : 'fr';
              
              if (window.getLocation) {
                const location = await window.getLocation();
                if (location) {
                  const forecastData = await fetchForecast(location.lat, location.lon);
                  if (forecastData) {
                    displayForecast(forecastData, currentLang);
                  }
                }
              }
            } catch (error) {
              console.error('Error in loadWeatherData override:', error);
            }
          }, 100);
          
          return result;
        };
      }

      // Update forecast language on language toggle
      const originalToggleLanguage = window.toggleLanguage;
      if (originalToggleLanguage) {
        window.toggleLanguage = function() {
          const result = originalToggleLanguage.call(this);
          
          // Re-display forecast with new language
          const forecastSection = document.getElementById('forecast-section');
          if (forecastSection.style.display !== 'none') {
            const langIndicator = document.getElementById('lang-indicator');
            const currentLang = langIndicator?.textContent === 'EN' ? 'en' : 'fr';
            
            // Update day labels if needed (simplified for now)
            const dayLabels = document.querySelectorAll('.day-label');
            dayLabels.forEach((label, index) => {
              if (index === 0) {
                label.textContent = currentLang === 'fr' ? 'Auj.' : 'Today';
              } else if (index === 1) {
                label.textContent = currentLang === 'fr' ? 'Dem.' : 'Tom.';
              }
            });
          }
          
          return result;
        };
      }
    });
  </script>
  
</BaseLayout>